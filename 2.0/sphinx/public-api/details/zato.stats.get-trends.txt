.. warning::
   This document is for a version of Zato that is no longer supported. The newest one is `here </docs/>`_.


zato.stats.get-trends
=====================

Overview
--------

Returns top N slowest or most commonly used services for a given period along with their trends.

.. note::

   Please visit :doc:`zato.stats.get-by-service <zato.stats.get-by-service>` for
   notes regarding a performance bottleneck returning trends may become.

* List response: Yes
* SOAP action: zato.stats.get-trends
* SOAP URL path: /zato/soap
* JSON URL path: /zato/json/zato.stats.get-trends
* WSDL: :download:`Click here</public-api/zato.wsdl>`

Request parameters
------------------

====== ======== ======== ====================================================================================
Name   Datatype Optional Notes
====== ======== ======== ====================================================================================
start  dateTime ---      Same as for :doc:`zato.stats.get-summary-by-range <zato.stats.get-summary-by-range>`
stop   dateTime ---      〃
n      int      ---      〃
n_type int      ---      〃
====== ======== ======== ====================================================================================
            

Response parameters
-------------------

======================= ======== ======== ====================================================================================
Name                    Datatype Optional Notes
======================= ======== ======== ====================================================================================
service_name            string   ---      Same as for :doc:`zato.stats.get-summary-by-range <zato.stats.get-summary-by-range>`
usage                   long     ---      〃
rate                    float    ---      〃
time                    double   ---      〃
min_resp_time           float    ---      〃
max_resp_time           float    ---      〃
all_services_usage      long     ---      〃
all_services_time       double   ---      〃
mean_all_services       float    ---      〃
usage_perc_all_services float    ---      〃
time_perc_all_services  float    ---      〃
======================= ======== ======== ====================================================================================

SOAP example
------------

.. code-block:: xml

  <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
       xmlns:zato="https://zato.io/ns/20130518">
     <soapenv:Body>
        <zato:zato_stats_get_trends_request>
           <zato:start>2013-02-10T12:10:00</zato:start>
           <zato:stop>2013-02-10T12:35:00</zato:stop>
           <zato:n>3</zato:n>
           <zato:n_type>usage</zato:n_type>
        </zato:zato_stats_get_trends_request>
     </soapenv:Body>
  </soapenv:Envelope>
      
  <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
   xmlns="https://zato.io/ns/20130518">
  <soap:Body>
   <zato_stats_get_trends_response xmlns="https://zato.io/ns/20130518">
   <zato_env>
       <cid>K068549232653700501839034589154827119674</cid>
       <result>ZATO_OK</result>
   </zato_env>
   <item_list>
     <item>
      <service_name>zato.server.cluster-wide-singleton-keep-alive</service_name>
      <usage>44</usage>
      <mean>34.32</mean>
      <rate>0.03</rate>
      <time>1620.0</time>
      <usage_trend>2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,1,1,2,2,2,2</usage_trend>
      <mean_trend>29,27,40,31,38,30,38,42,41,40,35,32,40,33,43,36,35,0,0,57,39,33,37,39,43</mean_trend>
      <min_resp_time>27.0</min_resp_time>
      <max_resp_time>155.0</max_resp_time>
      <all_services_usage>127</all_services_usage>
      <all_services_time>9313</all_services_time>
      <mean_all_services>70</mean_all_services>
      <usage_perc_all_services>34.65</usage_perc_all_services>
      <time_perc_all_services>17.4</time_perc_all_services>
     </item>
     <item>
      <service_name>zato.stats.aggregate-by-minute</service_name>
      <usage>21</usage>
      <mean>14.24</mean>
      <rate>0.01</rate>
      <time>356.0</time>
      <usage_trend>1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1</usage_trend>
      <mean_trend>11,8,18,15,18,9,10,21,13,15,77,9,10,18,10,7,9,0,0,0,0,8,13,28,29</mean_trend>
      <min_resp_time>7.0</min_resp_time>
      <max_resp_time>77.0</max_resp_time>
      <all_services_usage>127</all_services_usage>
      <all_services_time>9313</all_services_time>
      <mean_all_services>70</mean_all_services>
      <usage_perc_all_services>16.54</usage_perc_all_services>
      <time_perc_all_services>3.82</time_perc_all_services>
     </item>
     <item>
      <service_name>zato.stats.get-by-service</service_name>
      <usage>16</usage>
      <mean>27.52</mean>
      <rate>0.01</rate>
      <time>3020.0</time>
      <usage_trend>0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,12,1,0</usage_trend>
      <mean_trend>0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,54,130,212,229,0</mean_trend>
      <min_resp_time>54.0</min_resp_time>
      <max_resp_time>252.0</max_resp_time>
      <all_services_usage>127</all_services_usage>
      <all_services_time>9313</all_services_time>
      <mean_all_services>70</mean_all_services>
      <usage_perc_all_services>12.6</usage_perc_all_services>
      <time_perc_all_services>32.43</time_perc_all_services>
     </item>
   </item_list>
  </zato_stats_get_trends_response>
  </soap:Body>
  </soap:Envelope>

JSON example
------------

.. code-block:: javascript

  {
     "start": "2013-02-10T12:10:00",
     "stop": "2013-02-10T12:35:00",
     "n": 3,
     "n_type": "usage"
  }

  {
    "zato_stats_get_trends_response": [
      {
        "usage_perc_all_services": 34.65,
        "all_services_time": 9313,
        "time_perc_all_services": 17.4,
        "mean_trend": "29,27,40,31,38,30,38,42,41,40,35,32,40,33,43,36,35,0,0,57,39,33,37,39,43",
        "min_resp_time": 27,
        "service_name": "zato.server.cluster-wide-singleton-keep-alive",
        "max_resp_time": 155,
        "rate": 0.03,
        "mean_all_services": "70",
        "all_services_usage": 127,
        "time": 1620,
        "usage": 44,
        "usage_trend": "2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,1,1,2,2,2,2",
        "mean": 34.32
      },
      {
        "usage_perc_all_services": 16.54,
        "all_services_time": 9313,
        "time_perc_all_services": 3.82,
        "mean_trend": "11,8,18,15,18,9,10,21,13,15,77,9,10,18,10,7,9,0,0,0,0,8,13,28,29",
        "min_resp_time": 7,
        "service_name": "zato.stats.aggregate-by-minute",
        "max_resp_time": 77,
        "rate": 0.01,
        "mean_all_services": "70",
        "all_services_usage": 127,
        "time": 356,
        "usage": 21,
        "usage_trend": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1",
        "mean": 14.24
      },
      {
        "usage_perc_all_services": 12.6,
        "all_services_time": 9313,
        "time_perc_all_services": 32.43,
        "mean_trend": "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,54,130,212,229,0",
        "min_resp_time": 54,
        "service_name": "zato.stats.get-by-service",
        "max_resp_time": 252,
        "rate": 0.01,
        "mean_all_services": "70",
        "all_services_usage": 127,
        "time": 3020,
        "usage": 16,
        "usage_trend": "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,12,1,0",
        "mean": 27.52
      }
    ],
    "zato_env": {
      "details": "",
      "result": "ZATO_OK",
      "cid": "K068549232653700501839034589154827119674"
    }
  }

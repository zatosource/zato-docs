.. warning::
   This document is for a version of Zato that is no longer supported. The newest one is `here </docs/>`_.


zato.service.invoke
===================

Overview
--------

Invokes a service by its ID or name. From the service's viewpoint, there is no difference
between being invoked directly, through a channel or if using zato.service.invoke.

A service cannot invoke itself, a ZatoException will be raised in such a situation.

If executing a service in async mode, its response will be a CID it's been invoked with.

* List response: No
* SOAP action: zato.service.invoke
* SOAP URL path: /zato/soap
* JSON URL path: /zato/json/zato.service.invoke
* WSDL: :download:`Click here</public-api/zato.wsdl>`

Request parameters
------------------

=========== ======== ======== =======================================================================
Name        Datatype Optional Notes
=========== ======== ======== =======================================================================
id          int      Yes      Service ID. Either id or name must be provided.
name        int      Yes      Service name. Either id or name must be provided.
payload     string   Yes      BASE64-encoded payload that will be decoded on a server
                              and used as the service input
channel     string   Yes      :ref:`Channel <progguide-write-service-channel>`
                              the service will believe it's being invoked over
data_format string   Yes      Payload's :ref:`data format <progguide-write-service-data_format>`
transport   string   Yes      Transport the service should believe it's being invoked with
async       boolean  Yes      Whether the service should be invoked asynchronously, defaults to False
expiration  int      Yes      If using async mode, after how many seconds the message should expire,
                              defaults to 15 seconds
=========== ======== ======== =======================================================================
            

Response parameters
-------------------

======== ======== ======== ================================
Name     Datatype Optional Notes
======== ======== ======== ================================
response string   ---      Service response, BASE64-encoded
======== ======== ======== ================================

SOAP example
------------

.. code-block:: xml

   <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
        xmlns:zato="https://zato.io/ns/20130518">
      <soapenv:Body>
         <zato:zato_service_invoke_request>
            <zato:id>19</zato:id>
            <zato:payload>ICAgewogICAgICAiY2x1c3Rlcl9pZCI6IDEsCiAgICAgICJuYW1lIjogIm15c2VydmljZTEuSGVs
  bG9Xb3JsZCIKICAgfQ==</zato:payload>
            <zato:data_format>json</zato:data_format>
         </zato:zato_service_invoke_request>
      </soapenv:Body>
   </soapenv:Envelope>
      
   <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
      xmlns="https://zato.io/ns/20130518">
   <soap:Body>
       <zato_service_invoke_response xmlns="https://zato.io/ns/20130518">
       <zato_env>
           <cid>K183532160854289289145189943570064602750</cid>
           <result>ZATO_OK</result>
       </zato_env>
       <item>
           <response>eyJ6YXRvX3NlcnZpY2VfaGFzX3dzZGxfcmVzcG9uc2UiOiB7InNlcnZpY2VfaWQiOiA1MjA3LCAi
           aGFzX3dzZGwiOiB0cnVlfX0=
       </response>
   </item>
   </zato_service_invoke_response>
   </soap:Body>
   </soap:Envelope>


JSON example
------------

.. code-block:: javascript

   {
      "id": 19,
      "data_format": "json",
      "payload": "ICAgewogICAgICAiY2x1c3Rlcl9pZCI6IDEsCiAgICAgICJuYW1lIjogIm15c2VydmljZTEuSGVs\nbG9Xb3JsZCIKICAgfQ=="
   }
   
   {
     "zato_env": {
       "details": "",
       "result": "ZATO_OK",
       "cid": "K183532160854289289145189943570064602750"
     },
     "zato_service_invoke_response": {
       "response": "eyJ6YXRvX3NlcnZpY2VfaGFzX3dzZGxfcmVzcG9uc2UiOiB7InNlcnZpY2VfaWQiOiA1MjA3LCAi\naGFzX3dzZGwiOiB0cnVlfX0=\n"
     }
   }

.. warning::
   This document is for a version of Zato that is no longer supported. The newest one is `here </docs/>`_.


zato.service.get-source-info
============================

Overview
--------

Returns information regarding how a particular service's source code looks like.

* List response: No
* SOAP action: zato.service.get-source-info
* SOAP URL path: /zato/soap
* JSON URL path: /zato/json/zato.service.get-source-info
* WSDL: :download:`Click here</public-api/zato.wsdl>`

Request parameters
------------------

========== ======== ======== =====================================
Name       Datatype Optional Notes
========== ======== ======== =====================================
cluster_id int      ---      Cluster the service is deployed in
name       string   ---      Name of the service to fetch data for
========== ======== ======== =====================================
            

Response parameters
-------------------

================== ======== ======== =================================================
Name               Datatype Optional Notes
================== ======== ======== =================================================
service_id         int      ---      Cluster the service is deployed in
server_name        string   ---      Name of the server which returned the information
source             string   ---      Service's source code, BASE64-encoded
source_path        string   ---      Path to the service on the server's file system
source_hash        string   ---      Hash of the source code
source_hash_method string   ---      Method used to compute the hash, always 'SHA-256'
================== ======== ======== =================================================

SOAP example
------------

.. code-block:: xml

   <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
        xmlns:zato="https://zato.io/ns/20130518">
      <soapenv:Body>
         <zato:zato_service_get_source_info_request>
            <zato:cluster_id>1</zato:cluster_id>
            <zato:name>myservice1.HelloWorld</zato:name>
         </zato:zato_service_get_source_info_request>
      </soapenv:Body>
   </soapenv:Envelope>
      
   <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
      xmlns="https://zato.io/ns/20130518">
   <soap:Body>
    <zato_service_get_source_info_response xmlns="https://zato.io/ns/20130518">
    <zato_env>
        <cid>K012646114607277483784106438711154654775</cid>
        <result>ZATO_OK</result>
    </zato_env>
    <item>
        <service_id>5207</service_id>
        <server_name>server1</server_name>
        <source>ZnJvbSB6YXRvLnNlcnZlci5zZXJ2aWNlIGltcG9ydCBTZXJ2aWNlCgpjbGFzcyBIZWxsb1dvcmxk
        KFNlcnZpY2UpOgogICAgZGVmIGhhbmRsZShzZWxmKToKICAgICAgICBzZWxmLnJlc3BvbnNlLnBh
        eWxvYWQgPSAnSG93IGdvZXMgaXQ/Jw==
    </source>
    <source_path>/opt/zato/myservice1.py</source_path>
    <source_hash>da9dbc528eae16bc62afc7efe9e601b61834d2e3bf16285a35f2502bc5978bd1</source_hash>
    <source_hash_method>SHA-256</source_hash_method>
   </item>
   </zato_service_get_source_info_response>
   </soap:Body>
   </soap:Envelope>

JSON example
------------

.. code-block:: javascript

   {
      "cluster_id": 1,
      "name": "myservice1.HelloWorld"
   }

   {
     "zato_env": {
       "details": "",
       "result": "ZATO_OK",
       "cid": "K012646114607277483784106438711154654775"
     },
     "zato_service_get_source_info_response": {
       "server_name": "server1",
       "source_hash_method": "SHA-256",
       "source_path": "/opt/zato/myservice1.py",
       "source": "ZnJvbSB6YXRvLnNlcnZlci5zZXJ2aWNlIGltcG9ydCBTZXJ2aWNlCgpjbGFzcyBIZWxsb1dvcmxk\nKFNlcnZpY2UpOgogICAgZGVmIGhhbmRsZShzZWxmKToKICAgICAgICBzZWxmLnJlc3BvbnNlLnBh\neWxvYWQgPSAnSG93IGdvZXMgaXQ\/Jw==\n",
       "service_id": 5207,
       "source_hash": "da9dbc528eae16bc62afc7efe9e601b61834d2e3bf16285a35f2502bc5978bd1"
     }
   }

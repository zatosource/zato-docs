.. warning::
   You are browsing an old version of the documentation. The newest one is `here </docs/3.1>`_ .


zato.http-soap.create
=====================

Overview
--------

Creates a new plain HTTP or SOAP object, this can be either channel or an outgoing
connection, depending on the value of the 'connection' parameter.

* List response: No
* SOAP action: zato.http-soap.create
* SOAP URL path: /zato/soap
* JSON URL path: /zato/json/zato.http-soap.create
* WSDL: :download:`Click here</public-api/zato.wsdl>`

Basing on request parameters, the object created will be used for accepting
incoming requests or for invoking external services and a variety of combinations
can be used to achieve different ends, such as:

   * Exposing service 'myservice1' via JSON through any HTTP method
   
     * connection: 'channel'
     * transport: 'plain_http'
     * url_path: '/myapp/json/myservice1'
     * service: 'myservice1'
     * method: (None)
     * data_format: 'json'
     
   * Exposing service 'myservice1' via JSON only through the PUT HTTP method
   
     * connection: 'channel'
     * transport: 'plain_http'
     * url_path: '/myapp/json/myservice1'
     * service: 'myservice1'
     * method: 'PUT'
     * data_format: 'json'
     
   * Exposing service 'myservice2' via SOAP 1.1 through any HTTP method
   
     * connection: 'channel'
     * transport: 'soap'
     * url_path: '/myapp/soap/myservice2'
     * service: 'myservice1'
     * method: (None)
     * data_format: 'xml'
     * soap_action: 'myservice2'
     * soap_version: '1.1'
     
   * Creating an outgoing connection to an external JSON service on 10.152.11.182:9093/json
   
     * connection: 'outgoing'
     * transport: 'plain_http'
     * url_path: '/json'
     * host: '10.152.11.182:9093'
     
   * Creating an outgoing connection to an external SOAP 1.2 service 'customer.get' on crm.example.com/services/soap
   
     * connection: 'outgoing'
     * transport: 'soap'
     * url_path: '/services/soap'
     * soap_action: 'customer.get'
     * soap_version: '1.2'
     * host: 'crm.example.com'
     
.. note::

    Each triple of 'name', 'connection' and 'transport' must be unique for any
    cluster. Likewise, for each cluster, a combination of 'url_path', 'connection', 'soap_action'
    must be unique too.


Request parameters
------------------

==================== ========= ======== ================================================================================================================================================
Name                 Datatype  Optional Notes
==================== ========= ======== ================================================================================================================================================
cluster_id            int      ---      ID of the cluster this object should be created in
name                  string   ---      Name of the object to create
is_active             boolean  ---      Whether the object should be active upon its creation, if it can be used
connection            string   ---      Must be either 'channel' if the object is a channel or 'outgoing' if it's an outgoing connection
transport             string   ---      Must be either 'plain_http' for plain HTTP connections and 'soap' for SOAP ones
is_internal           boolean  ---      'true' if it's one of Zato's own internal objects, 'false' otherwise
url_path              string   ---      URL path to expose if it's a channel, a URL path to invoke if it's an outgoing connection. Must start with a '/'.
service               string   Yes      A service to invoke on an incoming request if it's a channel
security_id           int      Yes      If it's a channel, ID of an already existing security definition, one of 
                                        :doc:`HTTP Basic Auth.*<./zato.security.basic-auth>`, 
                                        :doc:`technical account<./zato.security.tech-account>` or 
                                        :doc:`WS-Security</public-api/details/zato.security.wss>`. If not given, from Zato's viewpoint, the channel will be open for everyone to invoke.
method                string   Yes      If it's a channel, an HTTP method that must be used by clients when invoking the channel. If not given, any method will work.
soap_action           string   Yes      SOAP action to expose the channel under if it's a channel. SOAP action to use when invoking services if it's an outgoing connections.
soap_version          string   Yes      Must be '1.1' if it's a channel; can be '1.1' or '1.2' if it's an outgoing connection.
data_format           string   Yes      If given and it's a channel, must be either 'xml' or 'json' - describes the expected data format of incoming requests
host                  string   Yes      If it's an outgoing connection, the host to invoke services on. Must include either 'http://' or 'https://' prefix.
ping_method           string   Yes      If it's an outgoing connection, the HTTP method to use for :doc:`pinging <./zato.http-soap.ping>` the connection. 
                                        HEAD will be used if ping_method is not given.
pool_size             int      Yes      If it's an outgoing connection, how many HTTP connections to keep in a pool at maximum for this particular
                                        outgoing connection. The connections are added to the pool as needed, on fly. Default value of 200
                                        will be used if pool_size is not given.
has_rbac              boolean  Yes      Required for channels. Whether the channel uses RBAC.
timeout               string   Yes      Required for outgoing connections. How long to wait, in seconds, for the response to arrive. May contain
                                        fractions of seconds and will be converted to a float internally.
sec_tls_ca_cert_id    string   Yes      Required for outgoing connections using SSL/TLS. ID of a set of
                                        :doc:`CA certs <../../web-admin/security/tls/ca-certs>`
                                        the resource being invoked uses.
serialization_type    string   Yes      Required for SOAP outgoing connections - will the requests be produced as string or using suds.
merge_url_params_req  boolean  Yes      Required for channels. Should URL parameters constitute part of the SimpleIO request if SimpleIO is used
                                        by the channel's service.
url_params_pri        string   Yes      Required for channels. Either 'path-over-qs' or 'qs-over-path' - what has priority in resolving parameters, URL path of query string.
==================== ========= ======== ================================================================================================================================================
            

Response parameters
-------------------

==== ======== ======== =======================================
Name Datatype Optional Notes
==== ======== ======== =======================================
id   int      ---      ID assigned to the newly created object
name string   ---      Copied over from request
==== ======== ======== =======================================

SOAP example
------------

.. code-block:: xml

   <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
        xmlns:zato="https://zato.io/ns/20130518">
      <soapenv:Body>
         <zato:zato_http_soap_create_request>
            <zato:cluster_id>1</zato:cluster_id>
            <zato:name>crm.channel.1</zato:name>
            <zato:is_active>true</zato:is_active>
            <zato:connection>channel</zato:connection>
            <zato:transport>soap</zato:transport>
            <zato:is_internal>false</zato:is_internal>
            <zato:url_path>/myapp/soap/myservice1</zato:url_path>
            <zato:service>myservice1</zato:service>
            <zato:security_id>1</zato:security_id>
            <zato:soap_action>myservice1</zato:soap_action>
            <zato:soap_version>1.1</zato:soap_version>
            <zato:data_format>xml</zato:data_format>
         </zato:zato_http_soap_create_request>
      </soapenv:Body>
   </soapenv:Envelope>
      
   <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
         xmlns="https://zato.io/ns/20130518">
      <soap:Body>
            <zato_http_soap_create_response xmlns="https://zato.io/ns/20130518">
               <zato_env>
                  <cid>K041070940068437245218753404298292871726</cid>
                  <result>ZATO_OK</result>
               </zato_env>
               <item>
                  <id>241</id>
                  <name>crm.channel.1</name>
               </item>
            </zato_http_soap_create_response>
      </soap:Body>
   </soap:Envelope> 

JSON example
------------

.. code-block:: javascript

   {
     "cluster_id": 1,
     "name": "crm.account2",
     "is_active": true,
     "connection": "outgoing",
     "transport": "plain_http",
     "url_path": "/json",
     "host": "http://10.152.11.182:9093",
     "ping_method": "OPTIONS",
     "pool_size": 90,
     "timeout": "3"
   }

   {
     "zato_env": {
       "details": "",
       "result": "ZATO_OK",
       "cid": "K041070940068437245218753404298292871726"
     },
     "zato_http_soap_create_response": {
       "id": 245,
       "name": "crm.account2"
     }
   }

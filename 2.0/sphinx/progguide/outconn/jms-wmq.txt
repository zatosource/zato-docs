.. warning::
   You are browsing an old version of the documentation. The newest one is `here </docs/3.1>`_ .


.. highlight:: python
   :linenothreshold: 0

JMS WebSphere MQ outgoing connections
======================================

Overview
--------

Asynchronously sends a message to a WebSphere MQ queue manager using 
:doc:`connection <../../web-admin/conn-def/jms-wmq>`
:doc:`parameters <../../web-admin/outgoing/jms-wmq>`
specified.

The application on the receiving end is assumed to have been written in Java
using MQ JMS API. This allows for seamless integration with Java JMS WMQ systems -
from their point of view Zato, despite being written in Python, will appear to be
a Java application.

The message is first published on the :doc:`Zato broker </architecture/redis>`
off of which the connector process responsible for communication with this particular
queue manager picks it up and actually sends it to the remote queue.

The underlying client JMS WMQ libraries are `PyMQI <https://github.com/dsuch/pymqi>`_
and `Spring Python <http://static.springsource.org/spring-python/1.2.x/sphinx/html/jms.html>`_.

.. note::

    Before making using of the connections, 
    :doc:`PyMQI needs to be first manually enabled <../../admin/guide/enabling-extra-libs>`
    by administrators.

API
---

.. _progguide-outconn-jms-wmq.send:

self.outgoing.jms_wmq.send
``````````````````````````

.. py:method:: send(msg, out_name, queue, delivery_mode=None, expiration=None, priority=None, max_chars_printed=None):

  Uses an outgoing connection of a given name to send a JMS message to a WebSphere MQ
  queue manager.
  
  Optional parameters, if not given, take values from the connection template,
  which in turn uses default values Spring Python provides and these are in accordance
  with the JMS spec.
  
  :param msg: Message to send
  :param out_name: Outgoing connection to use
  :param queue: Name of the queue to put a message on
  :param delivery_mode: Whether the message should be persistent or not
  :param expiration: After how many milliseconds after reaching the queue should the message expire
  :param priority: Message priority between 1 and 9 - 1 being the minimum priority
  :param max_chars_printed: How many characters of the message should Spring Python write out to logs
                            when running in DEBUG mode
  
  :type msg: string
  :type out_name: string
  :type queue: string
  :type delivery_mode: DELIVERY_MODE_NON_PERSISTENT or DELIVERY_MODE_PERSISTENT from the `springpython.jms module <https://github.com/SpringSource/spring-python/blob/master/src/springpython/jms/__init__.py>`_
  :type expiration: int
  :type priority: int
  :type max_chars_printed: int
  
  :rtype: (None)

Usage example
-------------

::

  from zato.server.service import Service
      
  class MyService(Service):
      def handle(self):
              
          # Request parameters
          msg = 'Hello MQ!'
          out_name = 'Customer Cases'
          queue = 'CUSTOMER.CASES.1'
          
          # Send the message to a queue manager
          self.outgoing.jms_wmq.send(msg, out_name, queue)

When caught travelling over the wire the raw bytes sent across to the 
queue manager can be confirmed to be a JMS message indeed.
          
::

  RFH \x00\x00\x00\x02\x00\x00\x00\xa0\x00\x00\x01\x11\x00\x00\x04\xb8
  MQSTR   \x00\x00\x00\x00\x00\x00\x04\xb8\x00\x00\x00x
  <jms><Dst>queue:///CUSTOMER.CASES.1</Dst><Tms>1367515530623</Tms><Dlv>1</Dlv>
  <Exp>1367515535623</Exp><Pri>5</Pri></jms> Hello MQ!
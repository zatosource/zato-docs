.. warning::
   You are browsing an old version of the documentation. The newest one is `here </docs/3.1>`_ .


.. highlight:: python
   :linenothreshold: 0

Outgoing SQL connections
========================

Overview
--------

Fetches an 
`SQLAlchemy connection session <http://docs.sqlalchemy.org/en/rel_0_8/orm/session.html>`_ from a pool of connections to the SQL database specified.

The session needs to be closed by the programmer - otherwise the pool will run out
of connections - the easiest
way to do it is to use the 
`with statement <http://docs.python.org/2.7/reference/datamodel.html#context-managers>`_ 
along with the 
`closing decorator <http://docs.python.org/2.7/library/contextlib.html#contextlib.closing>`_,
as in an example below.

The database may be one of:

* PostgreSQL
* Oracle

The underlying SQL toolkit is `SQLAlchemy <http://www.sqlalchemy.org/>`_.

When using :doc:`Simple IO (SIO) <../sio>` in conjunction with `SQLAlchemy <http://www.sqlalchemy.org/>`_ 
models, services are able  to construct responses - JSON or XML ones - directly out of a model's instance,
such as in a usage example.

.. note::

    Support for Oracle connections needs to be :doc:`manually enabled <../../admin/guide/enabling-extra-libs>`
    by administrators.

API
---

.. _progguide-outconn-sql-get-session:

self.outgoing.sql.get(out_name).session()
``````````````````````````````````````````

.. py:method:: get(out_name[, enforce_is_active=True]):

  Returns an object whose .session() method returns an SQLAlchemy session object
  which can be used to issue SQL queries against a database configured for the
  given connection name.
  
  :param out_name: Outgoing connection to use
  :type out_name: string
  
  :param enforce_is_active: Whether the connection's is_active flag should be
                            taken into account when checking out the object.
                            If False, it's possible to fetch it even though it's
                            not active.
  :type enforce_is_active: boolean
  
  :rtype: An object whose .session() method should be invoked to obtain 
          `a handle to an SQL session <http://docs.sqlalchemy.org/en/rel_0_8/orm/session.html>`_

Usage examples
--------------

It's possible to issue SQL directly:

::

  # stdlib
  from contextlib import closing
  
  # Zato
  from zato.server.service import Service
      
  class MyService(Service):
      def handle(self):
          
          out_name = 'CRM Connection'
          query = 'SELECT current_time'
  
          with closing(self.outgoing.sql.get(out_name).session()) as session:
              result = session.execute(query).fetchall()
              self.logger.info(result)
              
::

  INFO - [(datetime.time(20, 11, 25, 688245, 
    tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=120, name=None)),)]

You can use SQLAlchemy models:

::

  # stdlib
  from contextlib import closing
  
  # Let's imagine your application defines an SQLAlchemy Customer model somewhere
  # from myapp.model import Customer
  
  # Zato
  from zato.server.service import Service
      
  class MyService(Service):
      def handle(self):
          
          out_name = 'CRM Connection'
          cust_id = 1
  
          with closing(self.outgoing.sql.get(out_name).session()) as session:
              customer = session.query(Customer).\
                  filter(Customer.id==cust_id).\
                  one()
                  
              self.logger.info(customer)

::

  INFO - <myapp.model.Customer object at 0x5b4c810>>

SQLAlchemy and :doc:`SIO <../sio>` can be used to create responses directly out
of the former's models:

::

  # stdlib
  from contextlib import closing
  
  # Let's imagine your application defines an SQLAlchemy Customer model somewhere
  # from myapp.model import Customer
  
  # Zato
  from zato.server.service import Service
      
  class MyService(Service):
      
      class SimpleIO(object):
          output_required = ('name', 'last_name', 'is_active')
          
      def handle(self):
          
          out_name = 'CRM Connection'
          cust_id = 1
  
          with closing(self.outgoing.sql.get(out_name).session()) as session:
              self.response.payload = session.query(Customer).\
                  filter(Customer.id==cust_id).\
                  one()

::

  $ zato service invoke /opt/zato/dev/server1/ sql1.my-service
  {u'name': 'Max', u'last_name': u'Dumas', u'is_active': true}

Always remember to close the session object:

::

  # stdlib
  from contextlib import closing
  
  # Zato
  from zato.server.service import Service
      
  class MyService(Service):
      def handle(self):
          
          out_name = 'CRM Connection'
  
          # Use a decorator to automatically close the session ..
          with closing(self.outgoing.sql.get(out_name).session()) as session:
              pass
          
          # .. or remember to close it manually.
          session = self.outgoing.sql.get(out_name).session()
          session.close()

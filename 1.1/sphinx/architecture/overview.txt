.. warning::
   You are browsing an old version of the documentation. The newest one is `here </docs/3.1>`_ .


Architecture overview
=====================

Zato is composed of several components that cooperate with the aim of exposing
:doc:`services and applications <../progguide/overview>` to external clients.

.. image:: /gfx/arch-tech-overview.png
   :align: center

======================================== =====================================================================================

======================================== =====================================================================================
:doc:`Web admin<./web-admin>`            Main GUI for the management of servers running in clusters
:doc:`HA load-balancer<./load-balancer>` Sits in front of servers and distributes the incoming HTTP traffic in a fair manner
:doc:`Servers<./servers>`                The central piece where services are located. Servers are where HTTP, JSON, SOAP, 
                                         AMQP, JMS WebSphere MQ, ZeroMQ, Redis, SQL and FTP are dealt with. A server is
                                         always a part of a cluster.
                                         One of the servers of a cluster assumes the role of initiating the
                                         execution of scheduler jobs. 
:doc:`SQL ODB<./sql-odb>`                Operational Database for storing configuration that is usually static and can take
                                         advantage of SQL's relational model
:doc:`Redis<./redis>`                    A NoSQL key/value DB used for highly dynamic and rapidly changing data
:doc:`Certificate Authority (CA)<./ca>`  An additional component, an SSL CA used during the development,
                                         mainly with the goal of supporting 
                                         :doc:`zato quickstart </admin/cli/quickstart-create>` clusters
======================================== =====================================================================================

Zato is mostly written in Python with certain crucial parts, such as libraries
used for parsing XML and JSON, being actually wrappers around lower-level C ones.

Zato's asynchronous HTTP server is written on top of `gunicorn <http://gunicorn.org>`_. It's 
a modern server which lets one handle large numbers of incoming HTTP connections.

External connectors - used for AMQP, WebSphere MQ and ZeroMQ messaging - use
custom-written main loops developed using
`Pika <https://pika.readthedocs.org/>`_/`Kombu <https://pypi.python.org/pypi/kombu>`_, 
`Spring Python <http://static.springsource.org/spring-python/1.2.x/sphinx/html/jms.html>`_, 
and 
`ZeroMQ <http://www.zeromq.org/>`_
itself, respectively.

Note that SQL queries are processor-bound and that you shouldn't start hundreds
or thousands of scheduler jobs - these limits don't apply to other communication
methods - HTTP, Redis, AMQP, ZeroMQ, WebSphere MQ or FTP.
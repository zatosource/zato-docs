.. warning::
   You are browsing an old version of the documentation. The newest one is `here </docs/3.1>`_ .


.. highlight:: python
   :linenothreshold: 0

Scheduler usage examples
========================

.. _progguide-examples-scheduler-invoking:

Invoking services at predefined intervals
-----------------------------------------

No programming is needed to receive messages from scheduler. Create a new
:doc:`job <../../web-admin/scheduler/main>`
and a given service will be invoked each time it's scheduled to be run. Any extra
data provided in a job's definition will be available to a service in
self.request.raw_request

::

   from zato.server.service import Service   
   
   class MyService(Service):
       def handle(self):
           self.logger.info('Got message: {}'.format(self.request.raw_request))


.. _progguide-examples-zmq-scheduling-programmatically:

Scheduling jobs programmatically
--------------------------------

It's possible to use 
:doc:`the API <../../public-api/intro>`
to
:doc:`create <../../public-api/details/zato.scheduler.job.create>`
or otherwise 
:doc:`manage <../../public-api/details/zato.scheduler.job>`
scheduler jobs programmatically as in the example below.

::

    # stdlib
    from datetime import datetime
    
    # Zato
    from zato.server.service import Service
    
    class MyService(Service):
        def handle(self):
            
            request = {
                'cluster_id': self.server.cluster_id,
                'name': 'my-job-1',
                'is_active': True,
                'service': 'zato.ping',
                'job_type': 'cron_style',
                'start_date': datetime.utcnow().isoformat(), # Always in UTC
                'cron_definition': '@hourly'
            }
            
            self.invoke('zato.scheduler.job.create', request)

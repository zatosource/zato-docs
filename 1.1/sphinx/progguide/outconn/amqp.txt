.. warning::
   You are browsing an old version of the documentation. The newest one is `here </docs/3.1>`_ .


.. highlight:: python
   :linenothreshold: 0

AMQP outgoing connections
=========================

Overview
--------

Asynchronously sends a message to an AMQP exchange using 
:doc:`connection <../../web-admin/conn-def/amqp>`
:doc:`parameters <../../web-admin/outgoing/amqp>`
specified.

The message is first published on the :doc:`Zato broker </architecture/redis>`
off of which the connector process responsible for communication with this particular
AMQP broker picks it up and actually sends it to the remote exchange.

Note that the connection to the broker is initialized in a lazy fashion, it will
be established the first time it's needed.

The underlying client AMQP library is `Kombu <https://kombu.readthedocs.org/>`_.

API
---

.. _progguide-outconn-amqp-send:

self.outgoing.amqp.send
```````````````````````

.. py:method:: send(msg, out_name, exchange, routing_key, properties={}, headers={}):

  Uses an outgoing connection of a given name to send a message to an AMQP 
  exchange under a provided routing key.
  
  :param msg: Message to send
  :param out_conn: Outgoing connection to use
  :param exchange: Name of an exchange to send the message to
  :param routing_key: Name of a routing key, if any should be used
  :param properties: A dictionary, possibly empty, of additional properties to send
                     along with the message body. Each property takes precedence over 
                     any one set in the :doc:`connection template <../../web-admin/outgoing/amqp>`. 
                     
                     Supported keys are:
                     
                     * content_type
                     * content_encoding
                     * delivery_mode 
                     * priority
                     * expiration
                     * user_id
                     * app_id
                     * correlation_id
                     * cluster_id
                     
                     Consult AMQP docs for more information on how to use them. 

  :param headers: A dictionary, possibly empty, of extra headers to be sent along
                  with the messages. If not specified manually, Zato will send 
                  X-Zato-Component and X-Zato-Msg-TS headers to indicate 
                  where the message originated from and when it was. The latter
                  is in UTC.
  
  :type msg: string
  :type out_conn: string
  :type exchange: string
  :type routing_key: string
  :type properties: dict
  :type headers: dict
  
  :rtype: (None)

Usage example
-------------

::

  from zato.server.service import Service
      
  class MyService(Service):
      def handle(self):
              
          # Request parameters
          msg = 'Hello AMQP broker!'
          out_name = 'CRM1'
          exchange = 'CRM1'
          routing_key = ''
          properties = {'app_id': 'ESB'}
          headers = {'X-Foo': 'bar'}
              
          # Send a message to the broker
          self.outgoing.amqp.send(msg, out_name, exchange, routing_key,
              properties, headers)
            
We can now observe that a message sent to the CRM1 exchange ..

.. image:: /gfx/progguide/outconn-amqp-exch.png
   :align: center
   
went straight to the queue bound to the exchange - named CRM1 as well.

.. image:: /gfx/progguide/outconn-amqp-queue.png
   :align: center
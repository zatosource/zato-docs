.. warning::
   You are browsing an old version of the documentation. The newest one is `here </docs/3.1>`_ .


.. highlight:: python
   :linenothreshold: 0

HTTP outgoing connections
=========================

Overview
--------

Synchronously invokes a remote HTTP server using JSON, SOAP or any other transport
method using 
:doc:`previously configured <../../web-admin/outgoing/plain-http>`
:doc:`connection parameters <../../web-admin/outgoing/soap>`. 

If the connection has been configured to use a security definition, it will be picked up
automatically, without any coding. Likewise, if the service to be invoked is a SOAP one,
only the contents of a SOAP body should be passed to :ref:`.post <progguide-outconn-post>` 
and the envelope will be added by Zato.

Requests are sent in a synchronous manner but they don't block the current server thread.

The underlying client HTTP library is `Requests <http://docs.python-requests.org/en/latest/>`_.

Each request sent using one of the 
:ref:`.ping <progguide-outconn-ping>`, 
:ref:`.get <progguide-outconn-get>`
or 
:ref:`.post <progguide-outconn-post>`
methods will contain 3
Zato-specific HTTP headers:

================ ============================================= ========================================================================
Name             Example                                       Notes 
================ ============================================= ========================================================================
X-Zato-CID       K294883017331181958264688131768546402685      :ref:`CID <progguide-write-service-cid>` the service issuing the request
                                                               has been invoked with
X-Zato-Component parallel/esb1/esb1.example.com/21358/Thread-4 Information regarding which Zato parallel server issued the request
X-Zato-Msg-TS    2013-04-26T23:41:45.271911                    Request timestamp (in UTC)
================ ============================================= ========================================================================


API
---

.. _progguide-outconn-plain_http-get:

self.outgoing.plain_http.get
````````````````````````````

.. py:method:: get(name):

  Fetches an object whose .conn attribute represents a connection to an HTTP server
  invoked through plain HTTP, including JSON.
  
  :param name: Name of the :doc:`HTTP connection template <../../web-admin/outgoing/plain-http>`
  :type name: string
  
  :rtype: (A thin wrapper around a connection to the server)
  
.. _progguide-outconn-soap-get:

self.outgoing.soap.get
``````````````````````

.. py:method:: get(name):

  Fetches an object whose .conn attribute represents a connection to an HTTP server
  invoked through SOAP.
  
  :param name: Name of the :doc:`SOAP connection template <../../web-admin/outgoing/soap>`
  :type name: string
  
  :rtype: (A thin wrapper around a connection to the server)

.. note ::
  Regardless of whether the connection is to a plain HTTP server or to a SOAP one,
  the object returned offers a .conn attribute over which servers are actually accessed
  using methods and attributes listed below.

======= ========= ===============================================================================================
Name    Type      Notes
======= ========= ===============================================================================================
auth    attribute A username/password configured for the given HTTP connection, if any has been configured at all
ping    method    :ref:`Pings the remote server <progguide-outconn-ping>`
get     method    :ref:`Issues a GET request <progguide-outconn-get>`
post    method    :ref:`Issues a POST request <progguide-outconn-post>`
send    method    Alias to .post
session attribute A handle to the underlying `Requests <http://docs.python-requests.org/en/latest/>`_ library
                  which can be used to issue any other requests possible
======= ========= ===============================================================================================

.. _progguide-outconn-ping:

.. py:method:: ping(cid):

  Uses an HTTP method (such as HEAD) the connection was configured to use to check
  whether the remote server is alive, returns a text 
  report on how long it took for the other end to reply.
  
  :param cid: A correlation ID that can be used to establish a connection between
              the Zato request and any entries in the logs the other end may produce
  :type cid: string
  
  :rtype: (A text report regarding how long it took for the other side to reply)


.. _progguide-outconn-get:

.. py:method:: get(cid, params=None, prefetch=True, *args, **kwargs):

  Issues an HTTP GET request.
  
  :param cid: A correlation ID that can be used to establish a connection between
              the Zato request and any entries in the logs the other end may produce
              
  :param params: A dictionary of GET parameters to use
  :param prefetch: If the response should be downloaded immediately
  :param args: Positional arguments passed to the underlying HTTP library
  :param kwargs: Keyword arguments passed to the underlying HTTP library
              
  :type cid: string
  :type params: dict
  :type prefetch: bool
  :type args: tuple
  :type kwargs: dict
  
  :rtype: An instance of `requests.Response <http://docs.python-requests.org/en/latest/api/#requests.Response>`_
          class

.. _progguide-outconn-post:

.post
`````

.. py:method:: post(cid, data='', prefetch=True, *args, **kwargs):

  Issues an HTTP POST request.
  
  :param cid: A correlation ID that can be used to establish a connection between
              the Zato request and any entries in the logs the other end may produce
              
  :param data: String data to send to the remote peer
  :param prefetch: If the response should be downloaded immediately
  :param args: Positional arguments passed to the underlying HTTP library
  :param kwargs: Keyword arguments passed to the underlying HTTP library
              
  :type cid: string
  :type post: string
  :type prefetch: bool
  :type args: tuple
  :type kwargs: dict
  
  :rtype: An instance of `requests.Response <http://docs.python-requests.org/en/latest/api/#requests.Response>`_
          class

Usage examples
--------------

Plain HTTP - POST JSON
``````````````````````

::

  # stdlib
  from json import dumps
  
  # Zato
  from zato.server.service import Service
  
  class MyService(Service):
      def handle(self):
          
          cust_profile = self.outgoing.plain_http.get('CRM Customer Profile')
          cust_cases = self.outgoing.plain_http.get('CRM Customer Cases')
          
          request = dumps({'cust_id':1, 'name':'Foo Bar'})
          response = cust_profile.conn.post(self.cid, request)
          
          self.logger.info(response.headers['content-type'])
          self.logger.info(response.text)
          
          ping_info = cust_cases.conn.ping(self.cid)
          self.logger.info(ping_info)
          
Plain HTTP - GET requests
`````````````````````````

::

  from zato.server.service import Service
  
  class MyService(Service):
      def handle(self):
          out = self.outgoing.plain_http.get('CRM Connection')
          url_params = {'id':1, 'type_id':2}
          response = out.conn.get(self.cid, url_params)
          self.logger.info(response.text)
          
          
SOAP
````

::

  # lxml
  from lxml import etree

  # Zato
  from zato.server.service import Service
  
  class MyService(Service):
      def handle(self):
          service = self.outgoing.soap.get('Set Account Balance')
          resp = service.conn.send(self.cid, '<data><id>123</id><val>45.67</val></data>')
          
          # Parse resp.text to create an XML object
          xml = etree.fromstring(resp.text)

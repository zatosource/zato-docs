.. warning::
   You are browsing an old version of the documentation. The newest one is `here </docs/3.1>`_ .


.. highlight:: python
   :linenothreshold: 0

Debugging
=========

Despite using Python and Zato, bugs will still happen - this is a reality you need
to be prepared for and there's a couple of recommendations to make it less bothersome.

Upon encountering any abnormal situation you should make sure you know which
version of the service you're dealing with. Either do it yourself or ask an administrator
to :doc:`obtain the SHA sum of a module the service is contained in <../web-admin/service-details/source-code>`. Even though
you will most likely use some sort of a versioning scheme it will still be possible
that someone will deploy a service without updating its version. Hence comparing
the hash of the service that's deployed with the one you have access to locally
is recommended.

Each Zato service can use :doc:`logging <./logging>` and you are encouraged to always
log as much as is convenient in your services. Don't be worried that too much information
will be written out, it's possible you won't understand how much should be logged
the first time you create a set of services but eventually you will a perfect balance
between performance, disk space and the amount of details needed to successfully diagnose
critical situations.

Always provide context when logging information. There's no joy in spending
a night on diagnosing an issue at a client's site because a service's author decided
it was best to log information that 'An unexpected error has been encountered'. With Zato,
it's trivial to log 
:ref:`input <progguide-write-service-log_input>`/:ref:`output <progguide-write-service-log_output>` 
and the current stacktrace and these two pieces of information are usually the very 
minimum of what should be logged along.

Consult your admins and with everyone interested in the subject work out an approach
to log levels. In particular, people maintaining Zato servers should have a clear
understanding what sort of messages, and on which level, they should be particularly
on the lookout for - either manually or using any automated means. For instance, anything
that's not WARN or more severe could be ignored by production admins.

Remember that Zato is able to collect sample 
:doc:`service requests and responses <../web-admin/service-details/sample-req-resp>`. If a service
possibly produces an incorrect response and you have access to other environment the same service
is deployed in and the latter doesn't cause problems, you can compare its sample response and decide 
when the former one's is proper or not.

It's possible to store requests and responses belonging to service invocations that
:doc:`took more than a specified amount of time <../web-admin/service-details/slow-responses>` to complete. By comparing
these documents you may be able to discover that a slow response stems for a particular
set of input arguments.
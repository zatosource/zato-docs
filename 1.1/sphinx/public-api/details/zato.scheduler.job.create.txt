.. warning::
   This document is for a version of Zato that is no longer supported. The newest one is `here </docs/>`_.


zato.scheduler.job.create
=========================

Overview
--------

Allows one to create a scheduler's job. 

.. note::
   If job_type is 'interval_based', at least one of 'weeks', 'days', 'hours', 
   'minutes' or 'seconds' must be provided.

* List response: No
* SOAP action: zato.scheduler.job.create
* SOAP URL path: /zato/soap
* JSON URL path: /zato/json/zato.scheduler.job.create
* WSDL: :download:`Click here</public-api/zato.wsdl>`

Request parameters
------------------

================ ========= ======== =======================================================================================================================================
Name             Datatype  Optional Notes
================ ========= ======== =======================================================================================================================================
cluster_id       int       ---      ID of the cluster this job should be created in
name             string    ---      Name of the job to create
is_active        boolean   ---      Whether the job should be active upon its creation
job_type         string    ---      Job type depending on which certaing optional attributes will be required. Must be one of 'one_time', 'interval_based' or 'cron_style'.
service          string    ---      Name of an already existing service to invoke for each execution of the job
start_date       datetime  ---      When the job should be first time started. Format is "YYYY-MM-DDTHH:mm:ss", for instance "2014-05-31T15:37:11". Note that
                                    start_date must be in UTC, not in the local timezone of an application issuing the request.
extra            string    Yes      Extra data passed into the service as-is. May be multiline.
weeks            int       Yes      How often to execute the job, in weeks
days             int       Yes      How often to execute the job, in days
hours            int       Yes      How often to execute the job, in hours
minutes          int       Yes      How often to execute the job, in minutes
seconds          int       Yes      How often to execute the job, in seconds
repeats          int       Yes      How many times to execute the job. If empty, the job will be repeated forever.
cron_definition  string    Yes      If job_type is 'cron_style', the job's schedule written using `cron's syntax <https://en.wikipedia.org/wiki/Cron>`_. 
                                    Note that it's also possible to use one of the predefined definitions - 
                                    '\@yearly', '\@annually', '\@monthly', '\@weekly', '\@daily', or '\@hourly'. '\@yearly' and '\@annually' are equivalent.
================ ========= ======== =======================================================================================================================================
            

Response parameters
-------------------

=============== ======== ======== ============================================================================================================
Name            Datatype Optional Notes
=============== ======== ======== ============================================================================================================
id              int      ---      ID assigned to the newly created job
name            string   ---      Copied over from request
cron_definition string   Yes      Returned only if job_type is 'cron_style'. If request's cron_definition is one of the predefined ones
                                  its canonical values will be returned, e.g. '\@hourly' will be substituted with '0 \* \* \* \*'. Otherwise,
                                  if the original value was already in the canonical format - such as '1 0 \* \* \*' , it will be returned as-is.
=============== ======== ======== ============================================================================================================

SOAP example
------------

.. code-block:: xml

   <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
        xmlns:zato="https://zato.io/ns/20130518">
      <soapenv:Body>
         <zato:zato_scheduler_job_create_request>
            <zato:cluster_id>1</zato:cluster_id>
            <zato:name>Get Yesterday's Invoices</zato:name>
            <zato:is_active>true</zato:is_active>
            <zato:job_type>interval_based</zato:job_type>
            <zato:service>my.service.get.yday.invoices</zato:service>
            <zato:start_date>2013-02-21T23:10:11</zato:start_date>
            <zato:extra>skip-class:2010*;2012-10-*</zato:extra>
            <zato:days>1</zato:days>
         </zato:zato_scheduler_job_create_request>
      </soapenv:Body>
   </soapenv:Envelope>
      
   <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
      xmlns="https://zato.io/ns/20130518">
   <soap:Body>
       <zato_scheduler_job_create_response xmlns="https://zato.io/ns/20130518">
       <zato_env>
           <cid>K264235676637053672538485159770411053179</cid>
           <result>ZATO_OK</result>
       </zato_env>
       <item>
           <id>922</id>
           <name>Get Yesterday's Invoices</name>
           <cron_definition></cron_definition>
       </item>
   </zato_scheduler_job_create_response>
   </soap:Body>
   </soap:Envelope>

JSON example
------------

.. code-block:: javascript

   {
      "cluster_id": 1,
      "name": "Process Dunning Letters",
      "is_active": true,
      "job_type": "cron_style",
      "service": "my.service.dunning.letters",
      "start_date": "2013-02-21T23:10:11",
      "cron_definition": "@daily"
   }

   {
     "zato_env": {
       "details": "",
       "result": "ZATO_OK",
       "cid": "K264235676637053672538485159770411053179"
     },
     "zato_scheduler_job_create_response": {
       "cron_definition": "0 0 * * *",
       "id": 923,
       "name": "Process Dunning Letters"
     }
   }

.. warning::
   You are browsing an old version of the documentation. The newest one is `here </docs/3.1>`_ .


zato.channel.zmq.edit
=====================

Overview
--------

Updates an already existing ZeroMQ channel. The channel will be stopped.
If 'is_active' flag is 'true', the underlying socket will then be started.

  * List response: No
  * SOAP action: zato.channel.zmq.edit
  * SOAP URL path: /zato/soap
  * JSON URL path: /zato/json/zato.channel.zmq.edit
  * WSDL: :download:`Click here</public-api/zato.wsdl>`

Request parameters
------------------

=========== ======== ======== =======================================================================================
Name        Datatype Optional Notes
=========== ======== ======== =======================================================================================
id          int      ---      Channel ID
cluster_id  int      ---      ID of the cluster this channel should be editd in
name        string   ---      Name of the channel to edit
is_active   boolean  ---      Whether the channel should be active
address     string   ---      TCP address of a socket to connect to
socket_type string   ---      Type of the channel's socket. Must be either 'PULL' or 'SUB'.
service     string   ---      Name of an already existing service to invoke upon reading each message from the socket
sub_key     string   Yes      Subscription key, applicable only if socket_type is 'SUB'
data_format string   Yes      Expected data format. If given, should be either 'xml' or 'json'.
=========== ======== ======== =======================================================================================
            

Response parameters
-------------------

==== ======== ======== ========================
Name Datatype Optional Notes
==== ======== ======== ========================
id   int      ---      Copied over from request
name string   ---      Copied over from request
==== ======== ======== ========================

SOAP example
------------

.. code-block:: xml

   <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
        xmlns:zato="https://zato.io/ns/20130518">
      <soapenv:Body>
         <zato:zato_channel_zmq_edit_request>
            <zato:id>3</zato:id>
            <zato:cluster_id>1</zato:cluster_id>
            <zato:name>EXCHRT.DKK.1</zato:name>
            <zato:is_active>true</zato:is_active>
            <zato:address>127.0.0.1:33445</zato:address>
            <zato:socket_type>SUB</zato:socket_type>
            <zato:service>myservice</zato:service>
            <zato:sub_key>exchange.rates.DKK</zato:sub_key>
            <zato:data_format>xml</zato:data_format>
         </zato:zato_channel_zmq_edit_request>
      </soapenv:Body>
   </soapenv:Envelope>
      
   <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
      xmlns="https://zato.io/ns/20130518">
   <soap:Body>
       <zato_channel_zmq_edit_response xmlns="https://zato.io/ns/20130518">
       <zato_env>
           <cid>K027332005859286751230189716423720917224</cid>
           <result>ZATO_OK</result>
       </zato_env>
       <item>
           <id>3</id>
           <name>EXCHRT.DKK.1</name>
       </item>
   </zato_channel_zmq_edit_response>
   </soap:Body>
   </soap:Envelope>

JSON example
------------

.. code-block:: javascript

   {
     "id": 4,
     "cluster_id": 1,
     "name": "EXCHRT.HUF.2",
     "is_active": true,
     "address": "127.0.0.1:33445",
     "socket_type": "PULL",
     "service": "myservice",
     "data_format": "xml"
   }
   
   {
     "zato_env": {
       "details": "",
       "result": "ZATO_OK",
       "cid": "K027332005859286751230189716423720917224"
     },
     "zato_channel_zmq_edit_response": {
       "id": 4,
       "name": "EXCHRT.HUF.2"
     }
   }

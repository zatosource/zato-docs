.. warning::
   You are browsing an old version of the documentation. The newest one is `here </docs/3.1>`_ .


.. highlight:: ini
   :linenothreshold: 0

Configuring a server
====================

================================================================== ==================== ======================================================
Purpose                                                            File                 Example full path
================================================================== ==================== ======================================================
:ref:`Main config <admin-guide-config-server-main>`                server.conf          /opt/zato/dev1/server1/config/repo/server.conf
:ref:`Logging configuration <admin-guide-config-server-logging>`   logging.conf         /opt/zato/dev1/server1/config/repo/logging.conf
:ref:`Service sources <admin-guide-config-server-service-sources>` service-sources.txt  /opt/zato/dev1/server1/config/repo/service-sources.txt
:ref:`Crypto material <admin-guide-config-server-crypto>`          zato-server-\*.pem   /opt/zato/dev1/server1/config/repo/zato-server-\*.pem
================================================================== ==================== ======================================================


.. _admin-guide-config-server-main:

Main config - server.conf
-------------------------

Example
```````

(Long lines reformatted for clarity)

::

    [main]
    gunicorn_bind=localhost:17010
    gunicorn_worker_class=gevent
    gunicorn_workers=2
    gunicorn_timeout=240
    gunicorn_user=
    gunicorn_group=
    gunicorn_proc_name=
    gunicorn_logger_class=
    
    deployment_lock_expires=4294967296 # 2 ** 32 seconds â‰… 136 years
    deployment_lock_timeout=180
    
    token=647866dd32744fb2a4cdab3552ce0646
    service_sources=./service-sources.txt
    
    [crypto]
    priv_key_location=zato-server-priv-key.pem
    pub_key_location=zato-server-pub-key.pem
    cert_location=zato-server-cert.pem
    ca_certs_location=zato-server-ca-certs.pem
    
    [odb]
    db_name=zato1
    engine=postgresql
    extra=
    host=localhost
    password=C1/DeQiVpGPbM+tM1gMVRI3i+FOPqYZufdJhHNA0nbDRmjictGNQCMEng4m7
      g8Oz6QyJ6J406KHWQQEQ5Uj2SG6v2z35/tqzMKsdrXrHYaWoKA8PGbUuHzigp7ikjGk
      x1T117JiAo6UuyIqWt8FfswrlDkT/bSXG+Ac+FW4wvf97iASzzex11MQ9PY2yb5fAtB
      InKonj2lCNqePD8eG39N18EpLt3eHDWpWw9smJnYA8iRk1Qe6j/CEkHA36T8QNXR+Id
      1w2+C2YbhrOq0H/dEoeKoqGdfIwb3ZjAoURIcMqnCkUln1TamTe9y338WhjZ+MkMO5u
      Rqj1cZ0w9TR0+g==
    pool_size=1
    username=zato1
    
    [hot_deploy]
    pickup_dir=../../pickup-dir
    work_dir=../../work
    backup_history=100
    backup_format=bztar
    
    # These three are relative to work_dir
    current_work_dir=./hot-deploy/current
    backup_work_dir=./hot-deploy/backup
    last_backup_work_dir=./hot-deploy/backup/last
    
    [singleton]
    initial_sleep_time=500
    
    # If a server doesn't update its keep alive data in 
    # connector_server_keep_alive_job_time * grace_time_multiplier seconds
    # it will be considered down and another server from the cluster will assume
    # the control of connectors
    connector_server_keep_alive_job_time=30 # In seconds
    grace_time_multiplier=3
    
    [spring]
    context_class=zato.server.spring_context.ZatoContext
    
    [misc]
    internal_services_may_be_deleted=False
    initial_cluster_name = quickstart-737709
    initial_server_name = server1
    
    [kvdb]
    host=localhost
    port=6379
    unix_socket_path=
    password=
    db=0
    socket_timeout=
    charset=
    errors=


Discussion
``````````

.. _admin-guide-config-server-main.gunicorn_bind:

main.gunicorn_bind
@@@@@@@@@@@@@@@@@@

Host and port to bind to. Note that it always needs to synchronized with 
:ref:`the address the LB will attempt to find a server at <web-admin-load-balancer-servers>`.

main.gunicorn_worker_class
@@@@@@@@@@@@@@@@@@@@@@@@@@

Main worker class - using 'gevent', the default value makes Zato servers non-blocking
asynchronous ones however advanced users may wish to use 
`any other value gunicorn support <http://docs.gunicorn.org/en/latest/configure.html#worker-processes>`_

.. _admin-guide-config-server-main.gunicorn_workers:

main.gunicorn_workers
@@@@@@@@@@@@@@@@@@@@@

How many worker processes this server should start - in general, the total number
of workers in a given system across all servers shouldn't be more than 2 * CPU_COUNT,
so if there are 4 CPUs and 2 servers, each shouldn't have more than 4 main.gunicorn_workers.

Note that this is a recommendation only, each particular workload may need different settings.

main.gunicorn_timeout
@@@@@@@@@@@@@@@@@@@@@

After how many seconds a worker should be considered inactive - this should be set
to at least as many seconds as you expect your slowest service to respond in.

For instance, you know each service running on the server will respond under 10 s
so it's safe to set main.gunicorn_timeout to 20 in under to kill any processes with
services that take too long to complete.

Likewise, if you know there will be long-running scheduler-initiated batch processes
and each needs 60 s to complete, main.gunicorn_timeout should be set to a higher value
to allow for a long-running service to complete.

main.gunicorn_user
@@@@@@@@@@@@@@@@@@

Same as `gunicorn's user <http://docs.gunicorn.org/en/latest/configure.html#user>`_.

main.gunicorn_group
@@@@@@@@@@@@@@@@@@@

Same as `gunicorn's group <http://docs.gunicorn.org/en/latest/configure.html#group>`_.

main.gunicorn_proc_name
@@@@@@@@@@@@@@@@@@@@@@@

Same as `gunicorn's proc_name <http://docs.gunicorn.org/en/latest/configure.html#proc-name>`_.

main.gunicorn_logger_class
@@@@@@@@@@@@@@@@@@@@@@@@@@

Same as `gunicorn's logger_class <http://docs.gunicorn.org/en/latest/configure.html#logger-class>`_.

.. _admin-guide-config-server-main.deployment_lock_expires:

main.deployment_lock_expires
@@@@@@@@@@@@@@@@@@@@@@@@@@@@

When using a disitributed lock to coordinate a :doc:`hot-deployment <../installing-services>`
of a service, how many seconds to wait for a server to finish the deployment.

Should be at least as many seconds as it takes to hot-deploy a service in the worst 
case.

main.deployment_lock_timeout
@@@@@@@@@@@@@@@@@@@@@@@@@@@@

When :doc:`hot-deploying <../installing-services>` a service only one server will be allowed to
actually perform the action. Other servers will wait up that many seconds for their
try to deploy the service in case the server which was previously attempting to hot-deploy
it gave up for any reason.

main.token
@@@@@@@@@@

A unique token automatically assigned to this server purely for the purpose of 
identyfying a server in the ODB prior to obtaining the server's ID in the database,
i.e. this is akin to a primary key in its purpose.

Must not be repeated across all servers across all cluster re-using the same ODB. 

The default value is a UUID4 and it's recommended that it not be changed.

.. _admin-guide-config-server-main.service_sources:

main.service_sources
@@@@@@@@@@@@@@@@@@@@

Path to the file containing :ref:`service sources <admin-guide-config-server-service-sources>`
that describe which services to import when the server is starting up.

If not an absolute path, the path is relative to the main server.conf config file.

crypto.*
@@@@@@@@

Paths to the server's :ref:`crypto material <admin-guide-config-server-crypto>`.
If not absoulte, the paths are relative to the main config file.

odb.db_name
@@@@@@@@@@@

ODB database name.

odb.engine
@@@@@@@@@@

ODB type, may be one of:

* postgresql
* oracle

odb.extra
@@@@@@@@@

Extra parameters passed as kwargs directly into 
`SQLAlchemy's engine initializer <http://docs.sqlalchemy.org/en/rel_0_8/core/engines.html#engine-creation-api>`_.
For instance, setting the option to

.. code-block:: text

    [odb]
    extra=echo=True;logging_name=foobar

  
will make SQLAlchemy log all the SQL statements issued using the log name provided.

odb.host
@@@@@@@@

ODB database host.

odb.password
@@@@@@@@@@@@

The ODB user's password to use, encrypted using the server's private key. The password
can be 
:doc:`decrypted <../../cli/decrypt>`
and
:doc:`encrypted <../../cli/encrypt>`
from command line using 
:doc:`the CLI <../../cli/index>`.

odb.pool_size
@@@@@@@@@@@@@

ODB connection pool size.

odb.username
@@@@@@@@@@@@

Username to connect to the ODB with.

.. _admin-guide-config-server-hot_deploy.pickup_dir:

hot_deploy.pickup_dir
@@@@@@@@@@@@@@@@@@@@@

A path to the directory that will be used to :doc:`hot-deploy Zato services 
<../installing-services>` from.
If not absolute, the path is relative to the main server.conf config file.

.. _admin-guide-config-server-hot_deploy.work_dir:

hot_deploy.work_dir
@@@@@@@@@@@@@@@@@@@

A path to the directory that will be used to:

* :doc:`hot-deploy Zato services <../installing-services>` to
* keep a set of backups of services in their state prior to the deployment

If not absolute, the path is relative to the main server.conf config file.

hot_deploy.backup_history
@@@@@@@@@@@@@@@@@@@@@@@@@

Before hot-deploying a service, a backup of already existing services is created.
This setting controls how many backups to keep.

hot_deploy.backup_format
@@@@@@@@@@@@@@@@@@@@@@@@

Backed-up services are compressed using this format which may be one of the 
values Python's `shutil.make_archive <http://docs.python.org/2.7/library/shutil.html#archiving-operations>`_
accepts.

.. _admin-guide-config-server-hot_deploy.delete_after_pick_up:

hot_deploy.delete_after_pick_up
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

.. versionadded:: 2.0

Whether Python code should be deleted after it's been deployed through a pickup dir.
It's convenient to set it to False at least during development as it will make Zato
deploy a service module being developed after each save. 

The previous deployment must be finished before a new is started otherwise import
errors and conflicts may begin to appear.

hot_deploy.current_work_dir
@@@@@@@@@@@@@@@@@@@@@@@@@@@

A path to the directory that will be used to hot-deploy the services to. 

Must be relative to :ref:`hot_deploy.work_dir <admin-guide-config-server-hot_deploy.work_dir>`.

.. _admin-guide-config-server-hot_deploy.backup_work_dir:

hot_deploy.backup_work_dir
@@@@@@@@@@@@@@@@@@@@@@@@@@

A path to the directory that will be used to keep a linear log of service backups.

Must be relative to :ref:`hot_deploy.work_dir <admin-guide-config-server-hot_deploy.work_dir>`.

hot_deploy.last_backup_work_dir
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

A path to the directory that will be used to keep the last backup only - this is in addition
to the fact that the backup will be stored in 
:ref:`hot_deploy.backup_work_dir <admin-guide-config-server-hot_deploy.backup_work_dir>`
as well.

singleton.initial_sleep_time
@@@@@@@@@@@@@@@@@@@@@@@@@@@@

How many milliseconds to wait before starting a singleton server's thread. May need
manual tweaking on busy servers.

.. _admin-guide-config-server-singleton.connector_server_keep_alive_job_time:

singleton.connector_server_keep_alive_job_time
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

If there are any connectors running in the cluster and the server that is currently 
the connector server doesn't update its keep-alive status in 
singleton.connector_server_keep_alive_job_time * singleton.grace_time_multiplier
seconds, one of the other servers left - if any - will assume that the connector
server is down and will start the connectors itself assuming the role of a new connector
server for this cluster.

singleton.grace_time_multiplier
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Visit :ref:`singleton.connector_server_keep_alive_job_time <admin-guide-config-server-singleton.connector_server_keep_alive_job_time>`

spring.context_class
@@@@@@@@@@@@@@@@@@@@

Name of a Python class to create the 
`Spring Python context <https://github.com/zatosource/zato/blob/master/code/zato-server/src/zato/server/spring_context.py>`_
from.

misc.internal_services_may_be_deleted
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

If a request to delete a Zato's own internal service arrives, whether this server
should allow for it. The value must be consistent across all servers in a given
cluster.

misc.initial_cluster_name
@@@@@@@@@@@@@@@@@@@@@@@@@

Name of the cluster this server was initially a part of. Useful if a cluster
is renamed and there's a need to look up the server's original cluster name.

misc.initial_server_name
@@@@@@@@@@@@@@@@@@@@@@@@

Original name of this server at the time when it was created.

kvdb.*
@@@@@@

Settings allowing to connect to the Redis key/value DB which is used as the Zato broker.
Note that password, if any should be
:doc:`decrypted <../../cli/decrypt>`
and
:doc:`encrypted <../../cli/encrypt>`
from command line using 
:doc:`the CLI <../../cli/index>`.

.. _admin-guide-config-server-logging:

Logging configuration - logging.conf
------------------------------------

Example
```````

::

    [loggers]
    keys=root,zato
    
    [handlers]
    keys=rotating_file_handler, stdout_handler
    
    [formatters]
    keys=default_formatter, colour_formatter
    
    [logger_root]
    level=WARN
    handlers=rotating_file_handler, stdout_handler
    
    [logger_zato]
    level=DEBUG
    handlers=rotating_file_handler, stdout_handler
    qualname=zato
    propagate=0
    
    [handler_rotating_file_handler]
    class=logging.handlers.RotatingFileHandler
    formatter=default_formatter
    args=('./logs/server.log', 'a', 20000000, 10)
    
    [handler_stdout_handler]
    class=StreamHandler
    formatter=colour_formatter
    args=(sys.stdout,)
    
    [formatter_default_formatter]
    format=%(asctime)s - %(levelname)s - %(message)s
    
    [formatter_colour_formatter]
    format=%(asctime)s - %(levelname)s - %(message)s
    class=zato.common.util.ColorFormatter

Discussion
``````````

Uses `Python's own syntax <http://docs.python.org/2.7/library/logging.config.html#configuration-file-format>`_
to configure how and where logging messages should be  written to.

Of special interest are keys:

* logger_root.level - sets the log level for anything but Zato 
* logger_zato.level - sets the log level for Zato and nothing else

By default logs are written out to local files but it's possible to reconfigure
the logging to use any other destination Python itself supports such as syslog, ZeroMQ etc.

.. _admin-guide-config-server-service-sources:

Service sources - service-sources.txt
-------------------------------------

Example
```````

::

  ./my-services/import1
  ./my-services/import2
  
  # This should be kept at the end
  ./work/hot-deploy/current

Discussion
``````````

A list of paths, each relative to the server root, that will be scanned in order
to find services to deploy when the server is starting. 

Your own services, unless hot-deployed, should be kept in directories each of which 
has its own entry in this file.

Any line starting with the # sign is ignored.

.. _admin-guide-config-server-crypto:

Crypto material - zato-server-\*.pem
------------------------------------

Server's cryptograpical material is kept in PEM files. Private files must not
be password-protected.

* zato-server-priv-key.pem - private key
* zato-server-pub-key.pem - public key
* zato-server-cert.pem - certificate
* zato-server-ca-certs.pem - a list of CA certificates this server should trust

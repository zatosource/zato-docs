.. highlight:: python
   :linenothreshold: 1

Tutorial - part 1/2
===================

Introduction
------------

Before you begin, make sure to read the `high-level overview <./02>`_ for a general introduction to Zato and API integrations.

This **Zato** programming tutorial will guide you through the process of creating a real-world API service that,
with Python, will integrate three applications using REST and AMQP. The result will be a solution
ready to use in production.

But first, here are some examples of production environments designed and built with Zato - note that Zato is a general-purpose
platform and the samples span various distinct industries and domains. The platform can be used in all kinds
of scenarios that require integrations of distributed systems.

* A platform for processing **payments** from consumer devices

* A system for **a telecommunication operator** integrating CRM, ERP, Billing and other systems
  as well as applications of the operator's external partners

* A **data science** system for processing of information related to securities transactions (FIX)

* A platform for **public administration** systems, helping achieve **healthcare data interoperability**
  through the integration of independent data sources, databases and health information exchanges (HIE)

* A global **IoT platform** integrating medical devices

* A platform to process events produced by **early warning systems**

* Backend **e-commerce** systems managing multiple suppliers, marketplaces and process flows

* **B2B** platforms to accept and process multi-channel orders in cooperation with backend **ERP** and **CRM** systems

* Platforms integrating **real-estate** applications, collecting data from independent data sources to present unified APIs
  to internal and external applications

* A system for the management of hardware resources of an **enterprise cloud** provider

* **Online auction** sites

* **E-learning** platforms

What they all have in common is the level of complexity involved in integration processes. It is typical for such environments
to have at least several and sometimes several dozen or several hundred independent applications exchanging messages,
each possibly using a different technology and data format.

API services
============

If Zato is a platform for API services then what is a service?

In essence, a service is a piece of server-side functionality carrying out a business action that is useful and interesting
to applications that would like to use it. This is a high-level definition and this is the correct way to think about it.

It all stems from the fact that you should think about the systems and applications comprising your architecture
in terms of consumers and providers of services. Each part of the architecture offers services to other parts and,
conversely, each part consumes services offered by other pieces of the architecture.

Taken together, services form higher-level processes which fullfil actual business needs, no matter in what domain
you employ them, be it telco, financial services, healthcare, retail, utilities, public sector, education
or anything else. The same principles hold everywhere.

Zato is a multi-protocol platform and services are often not tied to any specific protocol. It means that it is possible
to design services that can be invoked through REST but the same ones can listen for messages from AMQP, IBM MQ queues
or SQL tables too. They can also accept HL7 MLLP, SOAP, WebSocket, SFTP, FTP, e-mail, JSON-RPC and ZeroMQ-based messages.

Naturally, REST is uniquitous and usually this is the way that most APIs are exposed through but it is not the only way
and in various scenarios other means of communication are employed.

Zato ships with connectors and adapters for REST, AWS S3, AMQP, Kafka, MongoDB, Redis, HL7, Odoo, SAP, IBM MQ,
SQL, SOAP, FTP, SFTP, LDAP, Cassandra, Dropbox, Twilio, IMAP, SMTP, ElasticSearch, Solr, Swift, Slack, Telegram,
WebSockets and ZeroMQ. Because it is written in Python, you have access to many third-party libraries which
provide connectivity to other types of systems.

Because API platforms often need dashboards, it is also possible to use Django templates with Zato to output user interfaces.

Built-in security options include API keys, Basic Auth, JWT, NTLM, OAuth, RBAC, SSL/TLS, Vault, WS-Security and XPath.
It is always possible to secure services using other, non-built in, means.

In terms of its implementation, an individual Zato service is a Python class implementing a specific method called self.handle.
The service receives input, processes it according to its business requirements and then some output is produced.
Note that both input and output are optional, e.g. a background service transfering files between applications
will usually have neither whereas a typical CRUD service will have both.

Because a service is merely a Python class, it means that each one consumes very little resources and it is possible
to deploy hundreds or thousands of services on a single Zato server. And because Zato can use multiple CPUs and multiple
Linux instances, it scales without limits both horizontally and vertically.

Services accept their input through channels - a channel tells Zato that it should make a particular service
available to the outside world using such and such protocol, data format and security definition. For instance, a service can
be mounted on independent REST channels, sometimes using API keys and sometimes using Basic Auth. Additionally,
each channel type has its own specific pieces of configuration, such as caching, timeouts or other options.

Services can invoke other Zato services too - this is just a regular Python method call, within the same
Python process. It means that it is very efficient to invoke other services - it is simply like invoking another Python
method.

Services are hot-deployed to Zato servers. It means that no restarts are needed for a change to a service to become
available to its consumers. During development, it works in a deploy-on-save manner - there are plugins for
:doc:`Visual Studio Code </progguide/ide/vscode>`
and
:doc:`PyCharm </progguide/ide/pycharm>`
that automatically deploy your service each time you save it in your IDE. Other code editors or IDEs can be used too.

During development, usually the built-in web-admin dashboard is used to create and manage channels or other Zato objects.
Once a solution is ready for DevOps automatiom though, Zato configuration can be deployed automatically from
:doc:`command line </admin/guide/enmasse>`
or directly from a git clone.

What will the tutorial achieve, exactly?
----------------------------------------

After completing the tutorial, we will have:

* A complete integration environment
* An API service offered via REST and JSON
* The service will invoke two REST endpoints to collect information
* The service will send notifications to an AMQP broker

.. _tutorial-01-message-flow:

Message flow
------------

.. image:: /gfx/tutorial/service-complete.png

We will be implementing an API integration process typical to banks and other financial institutions.

* A client application wishes to learn details about a customer given the person's ID
* Customer data is stored in a CRM
* Payments history is stored in a different application
* For certain customer types, there is a business requirement that a fraud detection
  system be notified of any operations regarding such customers and we send notifications
  to the system in accordance with the requirement

The Client App is a building block that we will not be in the tutorial - this is where
Django, React, Vue.JS, .NET and other frameworks can be used in actual projects.

On the other hand, other backend systems can invoke the service too - that is key, the same
one can be made available to many applications, each with its own access channel, even if in the tutorial
will assume there is only one.

Installing Zato
---------------

If you pick Docker or Vagrant, not only will this install Zato but the installer will automatically
set up a working quickstart cluster itself too. You can use it everywhere, on Windows, Mac or Linux.

* :doc:`Docker <../admin/guide/install/rhel>`
* :doc:`Vagrant <../admin/guide/install/ubuntu>`

Otherwise, you can install a Zato package for your selected Linux distribution and configure a quickstart cluster yourself -
this will take about 2 additional minutes.

* :doc:`Ubuntu <../admin/guide/install/ubuntu>` (make sure you have an LTS release)
* :doc:`RHEL/CentOS <../admin/guide/install/rhel>`
* :doc:`Suse <../admin/guide/install/rhel>`
* :doc:`Debian <../admin/guide/install/debian>`


You can author Zato services with any code editor and you can also install a plugin for your IDE to auto-deploy your
services on file save.

* :doc:`Visual Studio Code </progguide/ide/vscode>`
* :doc:`PyCharm </progguide/ide/pycharm>`

Refer to the chapters below, depending on your chosen installation method and IDE.

If you installed Zato under Docker
----------------------------------

If you installed Zato under Vagrant
-----------------------------------

If you installed Zato from a Linux package
------------------------------------------

If you have Visual Studio Code or PyCharm
-----------------------------------------

If you have another IDE or code editor
--------------------------------------

Done yet? OK, so if you are not using Docker, let's create a quickstart cluster, which is a sort of a cluster
created by running the
:doc:`CLI commands <../../admin/cli/index>`,
appropriately called
:doc:`zato quickstart create <../../admin/cli/quickstart-create>`.

You need to prepare:

* As user zato, an empty directory ($path), such as ~/env/qs-1
* Host, port and a password for connecting to Redis ($kvdb_host, $kvdb_port and $kvdb_password)

Note that user user zato created during installation does not have any default password. It means that you need either to
execute 'sudo su - zato' or 'su - zato' to switch to that user or change the zato user's password first as root or another
account with elevated privileges.

Now run the following command as user zato, substituting placeholders with the information
you've prepared. You'll be asked for passwords and they won't be echoed.

In the command below, observe that the Redis password can be empty - indeed, if you've just installed Redis without
configuring anything, it must be empty because by default Redis doesn't require it.

.. code-block:: text

  $ zato quickstart create $path sqlite $kvdb_host $kvdb_port \
    --kvdb_password $kvdb_password --verbose

For instance:

.. code-block:: text
  :emphasize-lines: 14

  $ zato quickstart create ~/env/qs-1 sqlite localhost 6379 \
    --kvdb_password '' --verbose

  [1/8] Certificate authority created
  [2/8] ODB schema created
  [3/8] ODB initial data created
  [4/8] server1 created
  [5/8] server2 created
  [6/8] Load-balancer created
  Superuser created successfully.
  [7/8] Web admin created
  [8/8] Management scripts created
  Quickstart cluster quickstart-962637 created
  Web admin user:[admin], password:[Fc8-43IRUVeyWVgKtUR8YqXJSQriJt6x]
  Start the cluster by issuing the /opt/zato/env/qs-1/zato-qs-start.sh command
  Visit https://zato.io/support for more information and support options
  $

Note the highlighted line - these are credentials you'll need to log into a
:doc:`web admin's instance <../web-admin/intro>`
just created. In case you feel the
`randomly generated password <https://github.com/zatosource/zato/blob/support/2.0/code/zato-common/src/zato/common/markov_passwords.py>`_,
even  a human-readable one, should still be changed, you can do it using the
:doc:`zato update password <../../admin/cli/update-password>`
command.

What was created by invoking zato quickstart create:

* A development CA
* 2 servers
* An HA load-balancer in front of the two
* A web-admin panel instance and an admin user
* ODB structure in SQLite and Redis
* Scripts to (re-)start the environment and stop it

The whole of it uses randomly generated crypto material (keys and certificates),
and is automatically configured so that all the parts are aware of each other,
e.g. the load balancer knows what servers to route the traffic to, the web admin
understands where all the components to manage are and so on.

In short, the command has just created a complete environment.

Important TCP ports that will be used are:

================================== =======================================================================
Port                               Notes
================================== =======================================================================
`11223 <http://localhost:11223>`_  Load-balancer's HTTP port
                                   (this is what external applications use to invoke services you develop)
`17010 <http://localhost:17010>`_  server1's HTTP port
`17011 <http://localhost:17011>`_  server2's HTTP port
`8183 <http://localhost:8183>`_    Web admin's HTTP port (this is where you point your browser to and log
                                   in as an admin user)
================================== =======================================================================

.. image:: /gfx/tutorial/quickstart-ports.png

The load-balancer and servers can all run on different hosts, but to keep focused
on basic things first, the tutorial uses a quickstart cluster which installs everything
on localhost.

And although this is a tutorial only, this can be a good approach to easily
create any serious Zato environment later on. Just create a quickstart
cluster, rename it to 'dev1' or similarly and start
:doc:`adding and configuring <../../admin/guide/install-config/overview>`
as many servers as you need.

Invoking services with cURL
---------------------------

.. note ::

  At this point, **you need to make sure that Redis is up,
  running and it allows for Zato connections**, i.e. the credentials you provided
  earlier, if any, are valid.

  You can check it by running these commands:

.. code-block:: text

    $ zato check-config $path/server1
    SQL ODB connection OK
    Redis connection OK
    $

.. code-block:: text

    $ zato check-config $path/server2
    SQL ODB connection OK
    Redis connection OK
    $

  If there's no output as shown above, the
  ./zato-qs-start.sh command below will not succeed and if you continue you'll hit upon
  issues in later steps so you'll be scratching your head trying to figure out
  what went wrong.

  **Again, please make sure Redis will allow Zato to establish connections.**

First off, let's start the thing we've just brought to this world:

.. code-block:: text

  $ ./zato-qs-start.sh
  Starting the Zato quickstart environment
  Running sanity checks
  [1/6] Redis connection OK
  [2/6] SQL ODB connection OK
  [3/6] Load-balancer started
  [4/6] server1 started
  [5/6] server2 started
  [6/6] Web admin started
  Zato quickstart environment started
  Visit https://zato.io/support for more information and support options
  $

Zato comes with several goodies meant to ease with development and one of them
is the zato.ping service which is automatically mounted on /zato/ping so it
can be invoked through the load-balancer using curl (output below is slightly reformatted for clarity).

.. code-block:: text

  $ curl localhost:11223/zato/ping ; echo
  {
    "zato_env": {"details": "", "result": "ZATO_OK", "cid": "K06KKS03EESNYYPHBWE74ZEJ4X56"},
    "zato_ping_response": {"pong": "zato"}
  }
  $

The response produced by zato.ping happens to be a JSON document.

* We can see  there were no errors encountered (ZATO_OK)
* The :ref:`correlation ID <progguide-write-service-cid>` (cid) serves as an
  identifier which can be used to reconcile information regarding the fate of a service's
  invocation across multiple systems

.. note ::

  Now that you've learned how to invoke a load-balancer you might be tempted to start
  benchmarking the ping service, but before you start doing it - stop for
  a while and read
  :doc:`how to configure a server <../../admin/guide/install-config/config-server>`,
  in particular, have a look at gunicorn_workers
  and play with it for a while.

  Also note, Zato is not meant to take part in HelloWorld contests - it's much
  more than a plain HTTP daemon and it doesn't make much sense to compare it against
  raw-`WSGI <https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface>`_ servers.


Hot-deploying your first service
--------------------------------

Fire up your favorite programming editor and let's finally create our own Zato service.

Save the following code as my_service.py

::

  from zato.server.service import Service

  class GetClientDetails(Service):
      def handle(self):
          self.log_input()


* Each
  :doc:`service <../progguide/service-dev>`
  always subclasses zato.server.service.Service

* :ref:`handle(self) <progguide-write-service-handle>`
  is the only method that a service must implement,
  this is where the actual action takes place, this is the heart of a service

* :ref:`log_input <progguide-write-service-log_input>`
  is one of the helper methods a service has access to. As you can imagine,
  this one dumps all the input data into server logs.

Code saved? Good, now we can hot-deploy it.

The story is, there are
:doc:`several ways <../../admin/guide/installing-services>`
to make code available to Zato and hot-deployment is one of them.

Either through command line or using the web admin, you can push services to one
of the servers in a cluster and it will be picked up automatically by all the nodes
without any restarts. This includes updates to services that already exist.

To hot-deploy a service from command line you need to copy the Python module
it's in into a pick-up directory.

In the tutorial you can use either $path/server1/pickup/incoming/services or
$path/server2/pickup/incoming/services, it doesn't matter which one you'll choose as the other
server will instantly synchronize its state with the one that will receive the service.

So, choosing $path/server1/pickup/incoming/services, copy the module:

.. code-block:: text

  $ cp my_service.py $path/server1/pickup/incoming/services

Now, in each server log - ./logs/server.log - there will be as many confirmations
of a successful deployment as there are worker processes running in your cluster.

::

  INFO - zato.hot-deploy.create:33 - Uploaded package id:[1], payload_name:[my_service.py]

Our service is there but we can't reach it from the client application yet because
it's not exposed through any
:doc:`channels <../../progguide/channels>` - a single service can be used over
many independent channels, each using different security configuration, transport
protocols, data format etc.

You need to explicitly tell Zato how to make a given service available to all
and each of external systems interested in invoking it. You do it in the
web admin so let's visit http://localhost:8183/ with a browser now.

Log in using the credentials you surely noted down a couple of steps above
or :doc:`update <../../admin/cli/update-password>` the admin's password
if you can't access it anymore.

.. image:: /gfx/tutorial/web-admin-login.png

From the main menu pick *Services*, choose your cluster, type *get-client* in the
search box and click *Show services*.

.. image:: /gfx/tutorial/web-admin-search.png
   :width: 95%

This confirms that the service indeed exists on the cluster even though it's
still not possible to access it from the outside.

A question may arise, how come the service is called my-service.get-client-details?
It's because Zato uncamelifies strings such as MyFancyName or PrepareCustomerDocuments
into my-fancy-name or prepare-customer-documents to make them more Pythonic.
Naturally, this can be :ref:`overridden <progguide-write-service-get_name>`.

Exposing a service over HTTP and invoking it
--------------------------------------------

OK, the service is deployed so why don't we make it possible for others to invoke it.

Still in the web admin, navigate to Connections -> Channels -> Plain HTTP

.. image:: /gfx/tutorial/web-admin-channels.png
  :width: 95%

.. and create a new channel ..

.. image:: /gfx/tutorial/web-admin-channels-new.png

Some of the fields may not be self-explanatory so there is, of course,
:doc:`a chapter <../web-admin/channels/plain-http>`
in the
:doc:`web admin guide <../web-admin/intro>`
where it's all detailed.

Note that in order to emphasize the point that a service's name is decoupled
from names of any channels that may be using it or from an HTTP path it's mounted
under, those values are all different in the tutorial.

.. image:: /gfx/tutorial/web-admin-channels-new-success.png

And that's it. The channel has been created, all servers have been notified of
its having been formed so they automatically hot-updated their HTTP configuration and we can
now use curl again to invoke our creation.

.. code-block:: text

  $ curl localhost:11223/tutorial/first-service
  $

This doesn't produce any output because the service returns none, it's only
logging its input data to server logs so this is where we need to look for
a palpable proof that a service was indeed invoked.

Note that the request went through a load-balancer and because we use local
files instead of logging to syslog, we can't be sure which server's logs to check
hence you need to grep in both of them and look for an entry similar to the one below
(reformatted a bit for clarity)

::

  INFO - 5428:Dummy-178 - my-service.get-client-details:703 - {u'impl_name': u'my_service.GetClientDetails',
    u'name': u'my-service.get-client-details',
    u'cid': u'K05A9DMYMJ023SB2E4B57BS6N3FW',
    u'invocation_time': datetime.datetime(2014, 12, 3, 21, 17, 16, 480128),
    u'job_type': None, u'data_format': u'json',
    u'slow_threshold': 99999, u'request.payload': u'',
    u'wsgi_environ': {u'zato.http.POST': <QueryDict: {}>,
      u'zato.http.remote_addr': '127.0.0.1',
      u'zato.request_timestamp_utc': <Arrow [2014-12-03T21:17:16.427072+00:00]>,
      'SERVER_PROTOCOL': 'HTTP/1.1',
      'SERVER_SOFTWARE': 'Zato',
      u'zato.http.channel_item': Bunch(audit_enabled=False, audit_max_payload=0, audit_repl_patt_type=None,
        connection=u'channel', data_format=u'json', has_rbac=False, host=None, id=536L,
        impl_name=u'my_service.GetClientDetails', is_active=True, is_internal=False,
        match_target=u':::/tutorial/first-service',
        match_target_compiled=<Parser u':::/tutorial/firs...'>,
        merge_url_params_req=True, method=u'', name=u'Get Client Details',
        params_pri=u'channel-params-over-msg', ping_method=None,
        pool_size=None, replace_patterns_json_pointer=[],
        replace_patterns_xpath=[], service_id=386L,
        service_impl_name=u'my_service.GetClientDetails',
        service_name=u'my-service.get-client-details',
        soap_action=u'', soap_version=None,
        transport=u'plain_http', url_params_pri=u'qs-over-path',
        url_path=u'/tutorial/first-service'),
      'SCRIPT_NAME': '',
      'wsgi.input': <gunicorn.http.body.Body object at 0x7f3d399f3690>,
      'REQUEST_METHOD': 'GET', 'HTTP_HOST': 'localhost:11223',
      'PATH_INFO': '/tutorial/first-service', 'wsgi.multithread': False,
      'QUERY_STRING': '', 'HTTP_CONNECTION': 'close',
      u'zato.oauth.post_data': {}, 'HTTP_ACCEPT': '*/*',
      u'zato.local_tz': <DstTzInfo 'Europe/Berlin' PMT+0:58:00 STD>,
      'HTTP_USER_AGENT': 'curl/7.35.0', 'wsgi.version': (1, 0),
      'REMOTE_PORT': '80', 'RAW_URI': '/tutorial/first-service',
      'REMOTE_ADDR': '127.0.0.1', 'wsgi.run_once': False,
      'wsgi.errors': <open file '<stderr>', mode 'w' at 0x7f3d5c6631e0>,
      'wsgi.multiprocess': True,
      u'zato.request_timestamp': datetime.datetime(
        2014, 12, 3, 22, 17, 16, 427072, tzinfo=<DstTzInfo 'Europe/Berlin' CET+1:00:00 STD>),
      u'zato.http.GET': {}, 'wsgi.url_scheme': 'http',
      'gunicorn.socket': <socket at 0x7f3d397e3050
        fileno=46 sock=127.0.0.1:17010 peer=127.0.0.1:58083>,
      'SERVER_NAME': 'localhost', 'SERVER_PORT': '11223',
      u'zato.http.response.headers': {u'X-Zato-CID': u'K05A9DMYMJ023SB2E4B57BS6N3FW'},
      'HTTP_X_FORWARDED_FOR': '127.0.0.1',
      'wsgi.file_wrapper': <class gunicorn.http.wsgi.FileWrapper at 0x7f3d4de107a0>},
      u'environ': {}, u'usage': 1,
      u'channel': u'http-soap'}

And that concludes the first part! You've created a cluster, a service, hot-deployed it
and then invoked it successfully. The :doc:`next part <./02>` will focus much
more on the business functionality now that the general framework to work within has
been laid down.

:doc:`Continue on to part 2/2 <./02>`

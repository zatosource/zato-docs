.. highlight:: python
   :linenothreshold: 1

Tutorial - part 2/2
===================

.. note ::

  Be sure to complete :doc:`part 1 <./01>` of the tutorial first.
  Some ideas previously explained there are not repeated here.

Invoking other systems
----------------------

To summarise it, in the previous part we set up a working Zato cluster, deployed a service and created
a REST API channel through which the service was invoked.

.. image:: /gfx/tutorial/service-complete.png

In this part we will make the service actually obtain data from remote systems and process it in accordance
with its business requirements.

To invoke other systems, applications and APIs, Zato services uses outgoing connections which is the
concept we will cover now.

Outgoing connections
--------------------

Outgoing connections are the natural counterpart to channels. Whereas channels allow one to make
Zato services become available to external API clients, with outgoing connections (outconns for short)
it is Zato services that invoke endpoints of external systems.

All outconns are invoked using attributes from **self.out**, e.g. self.out.rest, self.out.amqp, self.out.sap and so on,
maintaining a connection pool internally when needed so that services can just focus on the invocation part.

Outgoing connections, like channels or other Zato elements, let you insulate the business logic of services
from their configuration. As we will see later, a service only refers to abstract names like "CRM" when it wants
to access some external resource, without a need for it to know when the CRM actually is, under what address and secured
with what credentials.

Separating logic from configuration lets you deploy the same unchanged code to multiple environments. It also means
that it is easy migrate to new or modified environments. For instance, if today your service connects to a REST API
with a Basic Auth security definition but tomorrow the API will be secured with TLS private keys, it will be only
a matter of an update to configuration, but the service will continue to work uninterrupted, without any downtime.

Throughout the tutorial we mostly use the Dashboard to manage configuration but it can be exported to YAML and imported
in other environments too, we will tell of it later.

In addition to outconns, it is also possible to install libraries from `PyPI <https://pypi.org>`_ and invoke remote
systems using client libraries for connection types other than what Zato has built-in.

For the purposes of the tutorial, all the REST and AMQP endpoints are already prepared on zato.io so that you do not
need to set up anything and we can start by creating the outconns now.

REST outgoing connections
-------------------------

In Dashboard at http://localhost:8183, go to Connections -> Outgoing -> REST and click  Create a new REST outgoing connection.

.. image:: /gfx/tutorial/dashboard-outconn-rest-menu.png

A form will pop up, fill it out per the table below. Note the default HEAD ping method, we are going to make use of
it in the section.

=========== ==============================
Header      Value
=========== ==============================
Name        CRM
Host        \http://zato.io:9193
URL path    /tutorial/get-customer
Data format JSON
Security    No security
=========== ==============================

We need a REST outgoing connection to the Payments system too, as in the following table. Most of the details
are the same but note that the URL path contains a string pattern - we will talk about it in a moment.

=========== ==================================
Header      Value
=========== ==================================
Name        Payments
Host        \http://zato.io:9193
URL path    /tutorial/get-balance/{account_id}
Data format JSON
Security    No security
=========== ==================================

Pinging REST outgoing connections
---------------------------------

Having created REST outconns, we can check if they have connectivity to the systems they point to by pinging them - there is
Ping link for each outconn.

.. image:: /gfx/tutorial/dashboard-outconn-rest-ping-button.png

Click it and confirm that the response is similar to the one below - as long as it is in green, the connection works fine.

.. image:: /gfx/tutorial/dashboard-outconn-rest-ping-result.png

The connection is pinged not from your localhost but from one of the servers in your cluster - in this way you can confirm
that it is your servers, rather than your local connection, has access to a remote endpoint.

AMQP outgoing connections
-------------------------

AMQP connections are created similarly to the REST ones except that instead of going directly to outgoing connections,
we first visit Connections -> Definitions -> AMQP in the Dashboard.

Connection definitions are reusable configuration objects that are used if a given technology or protocol can be used
in both channels and outgoing connections which is the case with AMQP. The tutorial only sends messages to AMQP
but in another project you may have both AMQP channels and outconns pointing to the same broker.

Having a single definition with credentials for both types makes it convenient
to update the common parts of the configuration in one place only, i.e. after you change a username or host in
an AMQP definition, all channels and outgoing connections using this definition will auto-reconfigure and reconnect as needed.

Thus, go to Connections -> Definitions -> AMQP and create a new definition as in this table.

============ ==========================
Header       Value
============ ==========================
Name         Fraud Detection Definition
Host         zato.io
Port         34034
Virtual host /tutorial
Username     api
============ ==========================

This created a new AMQP connection definition and we need to set the user's password. Click Change password and enter
``wTGL6pQ9KxH2U`` - note that the password changes frequently in the tutorial's broker.

At this point, we have a definition but in itself, it will not connect to an AMQP broker, it is only channels or outconns
that connect using configuration and credentials from their definitions.

Hence, create a new AMQP outconn at Connections -> Outgoing -> AMQP, like below. Except for the two specific values
you can leave the rest unchanged with blank or default values.

========== ==========================
Header     Value
========== ==========================
Name       Fraud Detection Connection
Definition Fraud Detection Definition
========== ==========================

Pinging AMQP with publications
------------------------------

Back to the service
-------------------

Enmasse automation
------------------

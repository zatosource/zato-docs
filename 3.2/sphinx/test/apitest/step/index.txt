Default test steps and assertions
=================================

========= ======= ============================================================= ============================================================= =========================================================================
Section   Part    Pattern                                                       Notes                                                         Details
========= ======= ============================================================= ============================================================= =========================================================================
HTTP      Given   address "{address}"                                           An address of the API to invoke                               :doc:`Details <./given_address>`
HTTP      Given   Basic Auth "{username}" "{password}"                                                                                        :doc:`Details <./given_basic_auth>`
HTTP      Given   URL path "{url_path}"                                         URL path to invoke                                            :doc:`Details <./given_url_path>`
HTTP      Given   HTTP method "{method}"                                        HTTP method to use for invoking                               :doc:`Details <./given_http_method>`
HTTP      Given   Request file "{name}" is "{value}"                            Specifies the path to a file upload, relative to the          :doc:`Details <./given_file_upload_in_request>`
                                                                                ./features/form/request directory. This will send the request
                                                                                with http header Content-Type: multipart/form-data;
                                                                                boundary=XXX
HTTP      Given   Request param "{name}" is "{value}"                           This will send the request with HTTP header                   :doc:`Details <./given_form_encoded_data_in_request>`
                                                                                Content-Type: application/x-www-form-urlencoded
HTTP      Given   format "{format}"                                             Either 'JSON' or 'XML'                                        :doc:`Details <./given_format>`
HTTP      Given   user agent is "{value}"                                       User-Agent string to use                                      :doc:`Details <./given_user_agent_is>`
HTTP      Given   header "{header}" "{value}"                                   Arbitrary HTTP header to provide to the API                   :doc:`Details <./given_header>`
HTTP      Given   request "{request_path}"                                      Name of a file the request is kept in.
                                                                                Depending on format,
                                                                                either ``./features/json/request``
                                                                                or ``./features/xml/request`` will be prepended
                                                                                automatically.                                                :doc:`Details <./given_request>`
HTTP      Given   request is "{data}"                                           Request to use, inlined.                                      :doc:`Details <./given_request_is>`
HTTP      Given   query string "{query_string}"                                 Query string parameters in format of ?a=1&b=2,
                                                                                including the question mark                                   :doc:`Details <./given_query_string>`
Common    Given   date format "{name}" "{format}"                               Stores a date format ``format`` under a label
                                                                                ``name`` for use in later assertions                          :doc:`Details <./given_date_format>`
Common    Given   I store "{value}" under "{name}"                              Stores an arbitrary ``value`` under a ``name``
                                                                                for use in later assertions                                   :doc:`Details <./given_i_store_value_under_name>`
JSON      Given   JSON Pointer "{path}" in request is "{value}"                 Sets ``path`` to a string ``value`` in the request            :doc:`Details <./given_json_pointer_in_request_is>`
JSON      Given   JSON Pointer "{path}" in request is an integer "{value}"      Sets ``path`` to an integer ``value`` in the request          :doc:`Details <./given_json_pointer_in_request_is_an_integer>`
JSON      Given   JSON Pointer "{path}" in request is a float "{value}"         Sets ``path`` to a float ``value`` in the request             :doc:`Details <./given_json_pointer_in_request_is_a_float>`
JSON      Given   JSON Pointer "{path}" in request is a list "{value}"          Sets ``path`` to a list ``value`` in the request              :doc:`Details <./given_json_pointer_in_request_is_a_list>`
JSON      Given   JSON Pointer "{path}" in request is a random string           Sets ``path`` to a randomly generated string in the request   :doc:`Details <./given_json_pointer_in_request_is_a_random_string>`
JSON      Given   JSON Pointer "{path}" in request is a random integer          Sets ``path`` to a randomly generated integer in the request  :doc:`Details <./given_json_pointer_in_request_is_a_random_integer>`
JSON      Given   JSON Pointer "{path}" in request is a random float            Sets ``path`` to a randomly generated float in the request    :doc:`Details <./given_json_pointer_in_request_is_a_random_float>`
JSON      Given   JSON Pointer "{path}" in request is one of "{value}"          Sets ``path`` to a randomly chosen string out of ``value``
                                                                                in the request                                                :doc:`Details <./given_json_pointer_in_request_is_one_of>`
JSON      Given   JSON Pointer "{path}" in request is a random date "{format}"  Sets ``path`` to a randomly generated date
                                                                                using format ``format``                                       :doc:`Details <./given_json_pointer_is_rand_date>`
JSON      Given   JSON Pointer "{path}" in request is a random date after                                                                     :doc:`Details <./given_json_pointer_is_rand_date_after>`
                  "{date_start}" "{format}"
JSON      Given   JSON Pointer "{path}" in request is a random date before                                                                    :doc:`Details <./given_json_pointer_is_rand_date_before>`
                  "{date_end}" "{format}"
JSON      Given   JSON Pointer "{path}" in request is now "{format}"            Sets ``path`` to now in local timezone,
                                                                                using format ``format``                                       :doc:`Details <./given_json_pointer_is_now>`
JSON      Given   JSON Pointer "{path}" in request is UTC now "{format}"        Sets ``path`` to now in UTC, using format ``format``          :doc:`Details <./given_json_pointer_is_utc_now>`
JSON      Given   JSON Pointer "{path}" in request is a random date between     Sets ``path`` to a randomly generated date
                  "{date_start}" and "{date_end}" "{format}"                    between ``date_start``
                                                                                and ``date_end``, using format ``format``                     :doc:`Details <./given_json_pointer_is_rand_date_between>`
XML       Given   namespace prefix "{prefix}" of "{namespace}"                  For the duration of the test, stores ``prefix``
                                                                                of a ``namespace`` to be used in XPath expressions            :doc:`Details <./given_namespace_prefix>`
XML       Given   SOAP action "{value}"                                         Sets a request's SOAPaction header, if needed                 :doc:`Details <./given_soap_action>`
XML       Given   XPath "{xpath}" in request is "{value}"                       Sets ``xpath`` to a string ``value`` in the request           :doc:`Details <./given_xpath_in_request_is>`
XML       Given   XPath "{xpath}" in request is a random string                 Sets ``xpath`` to a randomly generated string in the request  :doc:`Details <./given_xpath_set_to_rand_string>`
XML       Given   XPath "{xpath}" in request is a random integer                Sets ``xpath`` to a randomly generated integer in the request :doc:`Details <./given_xpath_set_to_rand_int>`
XML       Given   XPath "{xpath}" in request is a random float                  Sets ``xpath`` to a randomly generated float in the request   :doc:`Details <./given_xpath_set_to_rand_float>`
XML       Given   XPath "{xpath}" in request is a random date "{format}"        Sets ``xpath`` to a randomly generated date
                                                                                using format ``format``                                       :doc:`Details <./given_xpath_is_rand_date>`
XML       Given   XPath "{xpath}" in request is now "{format}"                  Sets ``xpath`` to now in local timezone,
                                                                                using format ``format``                                       :doc:`Details <./given_xpath_is_now>`
XML       Given   XPath "{xpath}" in request is UTC now "{format}"              Sets ``xpath`` to now in UTC, using format ``format``         :doc:`Details <./given_xpath_is_utc_now>`
XML       Given   XPath "{xpath}" in request is a random date after
                  "{date_start}" "{format}"                                     Sets ``xpath`` to a randomly generated date
                                                                                after ``date_start``, using format ``format``                 :doc:`Details <./given_xpath_is_rand_date_after>`
XML       Given   XPath "{xpath}" in request is a random date before                                                                          :doc:`Details <./given_xpath_is_rand_date_before>`
                  "{date_end}" "{format}"
XML       Given   XPath "{xpath}" in request is a random date between
                  "{date_start}" and "{date_end}" "{format}"                    Sets ``xpath`` to a randomly generated date
                                                                                between ``date_start`` and ``date_end``,
                                                                                using format ``format``                                       :doc:`Details <./given_xpath_is_rand_date_between>`
XML       Given   XPath "{xpath}" in request is one of "{value}"                Sets ``xpath`` to a randomly chosen string out of ``value``
                                                                                in the request                                                :doc:`Details <./given_xpath_set_to_one_of>`
HTTP      When    the URL is invoked                                            Invokes the HTTP-based API under test                         :doc:`Details <./when_the_url_is_invoked>`
HTTP      Then    status is "{status}"                                          Asserts that the HTTP status code in response is ``status``   :doc:`Details <./then_status_is>`
HTTP      Then    context is cleaned up                                                                                                       :doc:`Details <./then_context_is_cleaned_up>`
                                                                                Cleans up any scenario-specific data, such as namespaces or
                                                                                date formats. Without it, they are carried over to
                                                                                subsequent scenarios
HTTP      Then    header "{header}" is "{value}"                                Asserts that a ``header`` exists and has value ``value``      :doc:`Details <./then_header_is>`
HTTP      Then    header "{header}" isn't "{value}"                             Asserts that a ``header`` exists and doesn't have
                                                                                value ``value``                                               :doc:`Details <./then_header_isnt>`
HTTP      Then    header "{header}" contains "{value}"                          Asserts that a ``header`` exists and contains
                                                                                substring ``value``                                           :doc:`Details <./then_header_contains>`
HTTP      Then    header "{header}" doesn't contain {value}"                    Asserts that a ``header`` exists and doesn't contain
                                                                                substring ``value``                                           :doc:`Details <./then_header_doesnt_contain>`
HTTP      Then    header "{header}" exists                                      Asserts that a ``header`` exists, regardless of its value     :doc:`Details <./then_header_exists>`
HTTP      Then    header "{header}" doesn't exist                               Asserts that a ``header`` doesn't exist                       :doc:`Details <./then_header_doesnt_exist>`
HTTP      Then    header "{header}" is empty                                    Asserts that a ``header`` exists and is an empty string       :doc:`Details <./then_header_is_empty>`
HTTP      Then    header "{header}" isn't empty                                 Asserts that a ``header`` exists and is any non-empty string  :doc:`Details <./then_header_isnt_empty>`
HTTP      Then    header "{header}" starts with "{value}"                       Asserts that a ``header`` exists and starts
                                                                                with substring ``value``                                      :doc:`Details <./then_header_starts_with>`
HTTP      Then    header "{header}" doesn't start with {value}"                 Asserts that a ``header`` exists and doesn't start
                                                                                with substring ``value``                                      :doc:`Details <./then_header_doesnt_start_with>`
HTTP      Then    header "{header}" ends with "{value}"                         Asserts that a ``header`` exists and ends
                                                                                with substring ``value``                                      :doc:`Details <./then_header_ends_with>`
HTTP      Then    header "{header}" doesn't end with "{value}"                  Asserts that a ``header`` exists and doesn't end
                                                                                with substring ``value``                                      :doc:`Details <./then_header_doesnt_end_with>`
TODO      Then    I store "{path}" from response under "{name}"
                                                                                Stores values of paths, either JSON Pointers or XPath, under
                                                                                labels, for the duration of a single test case (feature)      :doc:`Details <./then_i_store_path_under_name>`
TODO      Then    I store "{path}" from response under "{name}",
                  default "{default}"
                                                                                Stores values of paths, either JSON Pointers or XPath, under
                                                                                labels, for the duration of a single test case (feature). A
                                                                                default value will be used if the response doesn't contain
                                                                                a path provided                                               :doc:`Details <./then_i_store_path_under_name_with_default>`
JSON      Then    JSON Pointer "{path}" contains "{value}"                                                                                    :doc:`Details <./then_json_pointer_contains>`
JSON      Then    JSON Pointer "{path}" contains data from "{path}"                                                                           :doc:`Details <./then_json_pointer_contains_data_from>`
JSON      Then    JSON Pointer "{path}" is "{value}"                                                                                          :doc:`Details <./then_json_pointer_is>`
JSON      Then    JSON Pointer "{path}" is a float "{value}"                                                                                  :doc:`Details <./then_json_pointer_is_a_float>`
JSON      Then    JSON Pointer "{path}" is a list "{value}"                                                                                   :doc:`Details <./then_json_pointer_is_a_list>`
JSON      Then    JSON Pointer "{path}" is an integer "{value}"                                                                               :doc:`Details <./then_json_pointer_is_an_integer>`
JSON      Then    JSON Pointer "{path}" is empty                                                                                              :doc:`Details <./then_json_pointer_is_empty>`
JSON      Then    JSON Pointer "{path}" is one of "{value}"                                                                                   :doc:`Details <./then_json_pointer_is_one_of>`
JSON      Then    JSON Pointer "{path}" isn't empty                                                                                           :doc:`Details <./then_json_pointer_isnt_empty>`
JSON      Then    JSON Pointer "{path}" isn't one of "{value}"                                                                                :doc:`Details <./then_json_pointer_isnt_one_of>`
HTTP      Then    response is equal to "{expected}"                                                                                           :doc:`Details <./then_response_is_equal_to>`
HTTP      Then    response is equal to that  from "{path}"                                                                                    :doc:`Details <./then_response_is_equal_to_that_from>`
XML       Then    XPath "{xpath}" is "{value}"                                                                                                :doc:`Details <./then_xpath_is>`
XML       Then    XPath "{xpath}" is a float "{value}"                                                                                        :doc:`Details <./then_xpath_is_a_float>`
XML       Then    XPath "{xpath}" is an integer "{value}"                                                                                     :doc:`Details <./then_xpath_is_an_integer>`
XML       Then    XPath "{xpath}" is empty                                                                                                    :doc:`Details <./then_xpath_is_empty>`
XML       Then    XPath "{xpath}" is not empty                                                                                                :doc:`Details <./then_xpath_is_not_empty>`
XML       Then    XPath "{xpath}" isn't one of "{value}"                                                                                      :doc:`Details <./then_xpath_is_not_one_of>`
XML       Then    XPath "{xpath}" is one of "{value}"                                                                                         :doc:`Details <./then_xpath_is_one_of>`
========= ======= ============================================================= ============================================================= =========================================================================


.. highlight:: python
   :linenothreshold: 1

LinkedAuth.delete - Python API
==============================

Deletes an existing :doc:`link <../../../../topic/user/linked-auth>` between a security definition and an SSO user.

API
---

self.sso.user.delete_linked_auth
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. py:method:: delete_linked_auth(self, cid, ust, user_id, auth_type, auth_username, current_app, remote_addr)

  Deletes a link between an SSO user and one of its security definitions.

  :param cid: Correlation ID used by :doc:`audit log <../../../../audit/index>`
  :type cid: string

  :param ust: Current user's UST
  :type ust: string

  :param user_id: ID of the SSO user to delete a linked account from
  :type user_id: string

  :param auth_type: Type of the security definition that is to be unlinked
  :type auth_type: string

  :param auth_username: Username from the security definition that is to be unlinked
  :type auth_username: string

  :param current_app: Name of application the call is made from
  :type current_app: string

  :param remote_addr: Current user's remote address
  :type remote_addr: string

::

  # -*- coding: utf-8 -*-

  from __future__ import absolute_import, division, print_function, unicode_literals

  # Zato

  from zato.server.service import Service

  class DeleteLink(Service):
      def handle(self):

          # Request metadata
          current_ust = 'gAAAAABc9YDOwa4it_lLu3tHDjdKGdjHHzLTddA_qVIxjT...'
          current_app = 'CRM'
          remote_addr = '127.0.0.1'

          # ID of the user to create a link for
          user_id = 'zusr3tm8jhgqjd9smtdt7erb427s9x'

          # Account to link to the user
          auth_type = 'basic_auth'
          auth_username = 'pubapi'

          # The link shall be active
          is_active = True

          # Create the link
          self.sso.user.delete_linked_auth(self.cid, current_ust, user_id, auth_type,
            auth_username, current_app, remote_addr)

.. highlight:: python
   :linenothreshold: 1

SimpleIO (SIO) examples
=======================

.. _progguide-examples-sio-service:

Making a service accept and return JSON/XML/SOAP
------------------------------------------------

:doc:`SIO <../sio/index>` is a declarative syntax for accepting/returning simple requests/responses.
You can either return a group of attributes or a list of such groups. If hierarchies
or nested structures are needed, use higher-level services to create a composite
service out of SIO-based ones.

A service such as the ones below is written once, deployed and making it
accept JSON/XML/SOAP is a matter of creating appropriate channels, respectively:

- :doc:`Plain HTTP <../../web-admin/channels/plain-http>` channels with data format set to JSON
- :doc:`Plain HTTP <../../web-admin/channels/plain-http>` channels with data format set to XML
- :doc:`SOAP <../../web-admin/channels/soap>` channels

SIO services can create responses by reading attributes directly assigned to them,
out of Python dictionaries (or any dict-like objects, such as
`Bunch <http://pypi.python.org/pypi/bunch>`_)
or from
`SQLAlchemy <http://www.sqlalchemy.org/>`_
query results - hence all examples below produce the same response the data format
of which (JSON/XML/SOAP) depends on what channel the service has been invoked through.

::

    from zato.server.service import Service

    class MyService(Service):
        class SimpleIO:
            input_required = ('cust_id', 'cust_type')
            output_required = ('cust_name', 'preferred_product')

        def handle(self):
            self.response.payload.cust_name = 'John Brown'
            self.response.payload.preferred_product = 'ANBZ'

::

    from zato.server.service import Service

    class MyService(Service):
        class SimpleIO:
            input_required = ('cust_id', 'cust_type')
            output_required = ('cust_name', 'preferred_product')

        def handle(self):
            self.response.payload = {'cust_name':'John Brown', 'preferred_product':'ANBZ'}

::

    # bunch
    from bunch import Bunch

    # Zato
    from zato.server.service import Service

    class MyService(Service):
        class SimpleIO:
            input_required = ('cust_id', 'cust_type')
            output_required = ('cust_name', 'preferred_product')

        def handle(self):
            customer = Bunch()
            customer.cust_name = 'John Brown'
            customer.preferred_product = 'ANBZ'

            self.response.payload = customer

::

    # model.py

    # SQLAlchemy
    from sqlalchemy import Column, Integer, String
    from sqlalchemy.ext.declarative import declarative_base

    Base = declarative_base()

    class Customer(Base):
        cust_id = Column(Integer, primary_key=True)
        cust_type = Column(String(200))
        cust_name = Column(String(200))
        preferred_product = Column(String(200))

::

    # stdlib
    from contextlib import closing

    # app's model
    from model import Customer

    # Zato
    from zato.server.service import Service

    class MyService(Service):
        class SimpleIO:
            input_required = ('cust_id', 'cust_type')
            output_required = ('cust_name', 'preferred_product')

        def handle(self):
            with closing(self.odb.session()) as session:
                self.response.payload = session.query(Customer).\
                    filter(Customer.id==self.request.input.cust_id).\
                    one()

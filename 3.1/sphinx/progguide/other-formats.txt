.. highlight:: python
   :linenothreshold: 1

Other data formats
==================

If you can't use :doc:`SIO <./sio>`, :doc:`JSON <./json>` or :doc:`XML <./xml>`
your services can still accept and return data of any type
provided they're not so called binary data - such information needs to
wrapped in BASE64 or a similar encoding.

First let's create an empty service. Save the file as other_example.py and
:doc:`hot-deploy <../admin/guide/installing-services>` it. Next, add a channel to expose the service over.
Note that the channel doesn't specify any particular data format.

::

   from zato.server.service import Service

   class MyService(Service):
       def handle(self):
           pass

.. image:: /gfx/progguide/other-channel1.png
   :align: center


*

   Now that the channel has been created, we can modify the service to handle
   `CSV <https://en.wikipedia.org/wiki/Comma-separated_values>`_. This could be any
   other format but let's use CSV because of its clear syntax.

   The raw string a client passes in is available as self.request.payload. In the
   case below, we can process
   it using `Python's built-in csv <http://docs.python.org/2.7/library/csv.html>`_
   module.

   ::

      # stdlib
      import csv

      # Zato
      from zato.server.service import Service

      class MyService(Service):
          def handle(self):
              reader = csv.reader(self.request.payload.split(';'))
              for line in reader:
                  if line:
                      self.logger.info('Got elements: {}'.format(line))

.. code-block:: text

      $ cat data.csv
      q,w,e;
      r,t,y;
      u,i,o;
      $

.. code-block:: text

      $ curl localhost:17010/other-example.my-service -d @data.csv

.. code-block:: text

      INFO - Got elements: ['q', 'w', 'e']
      INFO - Got elements: ['r', 't', 'y']
      INFO - Got elements: ['u', 'i', 'o']

*

   To return a response, assign a value to self.response.payload. If using a custom
   data format, however, you will most likely prefer to use appropriate content
   type too, like in the `Short Payment Descriptor <https://en.wikipedia.org/wiki/Short_Payment_Descriptor>`_
   example below.

   ::

      from zato.server.service import Service

      class MyService(Service):
          def handle(self):
              self.response.payload = 'SPD*1.0*ACC:CZ2408000000190000000123*MSG:My debts'
              self.response.content_type = 'application/x-shortpaymentdescriptor'

   .. code-block:: text

      $ curl localhost:17010/other-example.my-service
      SPD*1.0*ACC:CZ2408000000190000000123*MSG:My debts

Simple IO (SIO)
===============

.. note ::

   Again, please consider using :doc:`SIO <./sio>` if you're developing a new application or its
   existing data model allows you to.
